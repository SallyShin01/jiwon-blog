---
title: "NumPy 개념정리"
date : "2025-03-07"
author: "Jiwon Shin"
categories: [news, code, analysis]
image: "NumPy-and-Python.avif"
---

## 넘파이 활용하기(배운것 정리)
 
 Numpy 개념정리!!

### NumPy 배열 생성

```{python}
# 벡터 생성하기 예제
import numpy as np

a = np.array([1, 2, 3, 4, 5]) # 숫자형 벡터 생
b = np.array(["apple", "banana", "orange"])
c = np.array([True, False, True, True]) #
print("Numeric Vector:", a)
print("String Vector:", b)
print("Boolean Vector:", c)
```


#### 빈 배열 선언 후 채우기

빈 배열 생성하기 - np.empty() or np.zeros()

```{python}
# 빈 배열 생성
x = np.empty(3)
print("빈 벡터 생성하기:", x)
```

#### 배열을 생성하며 채우기

np.arange() - 일정한 간격으로 숫자를 생성하여 반환

1. 0부터 10미만까지의 정수 배열 생성
```{python}
import numpy as np

arr1 = np.arange(10)
print("Array from 0 to 9:", arr1)

```

  
2. 0부터 2미만까지 0.5간격으로 배열 생성
```{python}
arr2 = np.arange(0, 2, 0.5)
print("0부터 1.5가지 0.5 간격으로 발생:", arr2)

```

3. 각 요소를 반복
각 요소를 개별적으로 반복 - np.repeat()
```{python}
# 배열 [1, 2, 4]의 각 요소를 각각 1, 2, 3번 반복
repeated_each = np.repeat([1, 2, 4], repeats=[1, 2, 3])
print("Repeated each element in [1, 2, 4] two times:", repeated_each)

```

4. 백터 전체를 반복해서 붙이기
백터 전체를 반복 - np.tile()
```{python}
# 배열 [1, 2, 4]를 2번 반복
repeated_whole = np.tile([1, 2, 4], 2)
print("벡터 전체를 두번 반복:", repeated_whole)

```

### NumPy 벡터길이 재는 방법 

#### len() 함수 사용하기

배열의 첫번째 차원의 길이를 반환
```{python}
import numpy as np
# 1차원 배열
a = np.array([1, 2, 3, 4, 5])
len(a)

```

#### shape 속성 사용하기
shape속성은 배열의 각 차원의 크기를 튜플 형태로 반환

```{python}
import numpy as np

# 1차원 배열
a = np.array([1, 2, 3, 4, 5])
a.shape

```

#### 배열의 전체 요소 수 구하기
size 속성은 배열의 전체 요소 수를 구함

```{python}
import numpy as np


a = np.array([1, 2, 3, 4, 5])
a.size

```

## NumPy를 사용하여 벡터 연산하기

백터간 덧셈, 뺼셈, 곱셈, 나눗셈 등의 연산은 벡터의 각 요소에 동시 수행됨

```{python}
import numpy as np

# 벡터 생성
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

# 벡터 간 덧셈
add_result = a + b
print("벡터 덧셈:", add_result)

# 벡터 간 뺄셈
sub_result = a - b
print("벡터 뺄셈:", sub_result)

# 벡터 간 곱셈
mul_result = a * b
print("벡터 곱셈:", mul_result)

# 벡터 간 나눗셈
div_result = a / b
print("벡터 나눗셈:", div_result)

# 벡터 간 나머지 연산
mod_result = a % b
print("벡터 나머지 연산:", mod_result)

```

## 백터화(Vectorized) 코드
반복문을 사용하지 않고 벡터를 한 번에 처리할 수 있게 해준다.

이를 통해 여러 값을 동시에 처리 할 수 있고, 가독성과 성능을 높인다.

```{python}
import numpy as np

# 백터 덧셈셈
a = np.array([1, 2, 4])
b = np.array([2, 3, 5])
c = a + b
print("벡터 덧셈:", c)


# 상수 곱셈
x = np.array([1, 2, 4, 5])
y = x * 2
print("상수 곱셈:", y)
```

## NumPy의 브로드캐스팅(Broadcasting)
길이가 다른 배열 간의 연산을 가능하게 해주는 메커니즘

#### 브로드캐스팅의 기본 원리
두배열이 차원을 비교할 떄, 끝 차원부터 시작하여 앞으로 진행함

연산이 가능하려면:

1. 차원의 크기가 같거나 
2. 차원 중 하나의 크기가 1인 경우 

#### 브로드캐스팅이 안되는 경우
배열의 shape을 맞춰 계산 가능함. 

이 경우 shape을 맞춰서 연산이 가능!


#### 브로드캐스팅 되는 경우
Ex- 2차원 배열과 1차원 배열의 덧셈
```{python}
import numpy as np
# 2차원 배열 생성
matrix = np.array([[ 0.0, 0.0, 0.0],
[10.0, 10.0, 10.0],
[20.0, 20.0, 20.0],
[30.0, 30.0, 30.0]])
# 1차원 배열 생성
vector = np.array([1.0, 2.0, 3.0])
print(matrix.shape, vector.shape)

# 브로드캐스팅을 이용한 배열 덧셈
result = matrix + vector
print("브로드캐스팅 결과:\n", result)
```


#### 벡터 내적 활용하기
dot product(백터 내적)은 두 벡터의 요소를 곱한 후 합산하는 연산

```{python}
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
dot_product = np.dot(a, b)
print("벡터 내적:", dot_product)

```

#### NumPy 벡터 슬라이싱
벡터 일부 추출 시 [] 사용

```{python}
import numpy as np
# 벡터 슬라이싱 예제, a를 랜덤하게 채움
np.random.seed(42)
a = np.random.randint(1, 21, 10)
print(a)

print(a[1]) # 두 번째 값 추출

print(a[1:4]) # 인덱스 1부터 3까지 추출; 4는 미포함

print(a[::2]) #첫번째, 세번째, 다섯번째(2씩 커지며 전체범위 지정)

```


### 조건을 만족하는 위치 탐색 np.where()
np.where()함수를 이용하여 논리값이 TRUE 인 원소의 위치를 반환하는 역활을 함. 

```{python}
import numpy as np
a = np.array([1, 5, 7, 8, 10]) # 예시 배열
result = np.where(a < 7)
result

```


### 벡터 함수 사용하기 
평균, 합계, 중앙값, 표준편차를 계산 할수 있음
```{python}
import numpy as np

# 벡터 함수 사용하기 예제
a = np.array([1, 2, 3, 4, 5])
sum_a = np.sum(a) # 합계 계산
mean_a = np.mean(a) # 평균 계산
median_a = np.median(a) # 중앙값 계산
std_a = np.std(a, ddof=1) # 표준편차 계산
sum_a, mean_a, median_a, std_a


```


### 빈 칸을 나타내는 방법
#### 데이터가 정의 되지 않은 값 np.nan()

```{python}
import numpy as np
a = np.array([20, np.nan, 13, 24, 309])
a


# nan 무시 옵션
np.nanmean(a) # nan 무시 함수
```


#### 데이터값이 없음을 나타내는 None
None은 아무런 값도 없는 상태를 나타냄.
# None + 1   수치연산 불가(Typeerror 반환)



### 여러 벡터들을 묶기
np.concatenate()  함수 사용
```{python}
import numpy as np
str_vec = np.array(["사과", "배", "수박", "참외"])
str_vec

mix_vec = np.array(["사과", 12, "수박", "참외"], dtype=str)
mix_vec

combined_vec = np.concatenate((str_vec, mix_vec))
combined_vec

```

np.column_stack()와 np.row_stack()
```{python}
col_stacked = np.column_stack((np.arange(1, 5), np.arange(12, 16)))
col_stacked  # 벡터들을 세로로 배열


row_stacked = np.row_stack((np.arange(1, 5), np.arange(12, 16)))
row_stacked  # 벡터들을 가로로 배열

```

#### 길이가 다른 벡터 합치기
np.resize() 함수를 사용하면 길이를 강제로 맞춰줌. 
```{python}
import numpy as np

# 길이가 다른 벡터
vec1 = np.arange(1, 5)
vec2 = np.arange(12, 18)
vec1 = np.resize(vec1, len(vec2))
vec1

```


### 여러 조건을 처리하기 - numpy.select()
각 조건에 대한 결과를 리스트로 작성하여 조건에 따라 결과를 반환할 수 있음. 
```{python}
import numpy as np

x = np.array([1, -2, 3, -4, 0])
conditions = [x > 0, x == 0, x < 0]
choices = ["양수", "0", "음수"]
result = np.select(conditions, choices, default="기타") # 기본값을 문자열로 설정
print(result)

```

### 메모리 절약을 위한 데이터 타입 설정(dtype)
Numpy 배열 생성할 떄, 기본적으로 float64 타입 사용  
But, float32 or int32 작은 데이터를 사용하면 메모리를 절약 할 수 있음
```{python}
import numpy as np

a = np.array([1.0, 2.0, 3.0], dtype=np.float64) # 기본 dtype: float64
b = np.array([1.0, 2.0, 3.0], dtype=np.float32) # float32로 저장
print("float64 배열 크기:", a.nbytes, "bytes") # 8 bytes * 3 = 24 bytes

```

### 행렬이란?
벡터들을 사용하여 만들 수 있는 객체

#### 행렬 만들기
np.zeros() - 빈 행렬 생성, 사이즈만 지정
```{python}
import numpy as np

# 2행 2열 빈 행렬 생성
y = np.zeros((2, 2))
print("빈 행렬 y:\n", y)

```

#### 채우면서 만들기
```{python}
# 1부터 4까지의 수로 채운 2행 2열 행렬 생성
y = np.arange(1, 5).reshape(2, 2)
print("1부터 4까지의 수로 채운 행렬 y:\n", y)
```

#### order 옵션
'C' : 행 우선 순서

'F' : 열 우선 순서

```{python}
import numpy as np

# 가로 방향으로 채우기 (기본값)
y = np.arange(1, 5).reshape((2, 2), order='C')
print("가로 방향으로 채운 행렬 y:\n", y)


import numpy as np

# 가로 방향으로 채우기
y = np.arange(1, 5).reshape((2, 2), order='F')
print("가로 방향으로 채운 행렬 y:\n", y)

```

### 행렬 인덱싱
```{python}
import numpy as np

# 1부터 10까지의 수에 2를 곱한 값으로 5행 2열의 행렬 생성
x = np.arange(1, 11).reshape((5, 2)) * 2
print("행렬 x:\n", x)

# 1행 2열의 원소 접근
element = x[0, 1]
print("1행 2열의 원소:", element)

# 두번째 열의 모든 원소 반환
second_column = x[:, 1]
print("두 번째 열의 모든 원소:", second_column)

# 세번째 행의 모든 원소 반환
third_row = x[2, :]
print("세 번째 행의 모든 원소:", third_row)

# 두 번째 열에서 두 번째, 세 번째, 다섯 번째 행의 원소 반환
selected_elements = x[[1, 2, 4], 1]
print("두번째 열의 2, 3, 5번째 행의 원소: \n", selected_elements)

# 두 번째 열의 원소가 15보다 큰 행의 첫 번째 열의 원소 반환
filtered_elements = x[x[:, 1] > 15, 0]
print("두 번째 열의 원소가 15보다 큰 행의 첫 번째 열의 원소:\n", filtered_elements)

```

### 사진은 행렬이다. 
```{python}
import matplotlib.pyplot as plt

# 난수 생성하여 3x3 크기의 행렬 생성
np.random.seed(2024)
img1 = np.random.rand(3, 3)

# 행렬을 이미지로 표시
plt.figure(figsize=(10, 5)) # (가로, 세로) 크기 설정
plt.imshow(img1, cmap='gray', interpolation='nearest')
plt.colorbar()
plt.show()
```

### 행렬의 연산

#### 행렬 뒤집기(Transpose)
주어진 행렬의 행과 열을 뒤집어 반환함. 
```{python}
import numpy as np

# 5행 2열의 행렬 생성
x = np.arange(1, 11).reshape((5, 2)) * 2
print("원래 행렬 x:\n", x)

```

#### 행렬의 곱셈(dot prodcut)
행렬의 곱셍은 행렬 크기가 맞아야 가능함. 

```{python}
# 2행 3열의 행렬 y 생성
y = np.arange(1, 7).reshape((2, 3))
print("행렬 y:\n", y)
x.shape
y.shape

# 행렬곱 계산
dot_product = x.dot(y)
print("행렬곱 x * y:\n", dot_product)

# 행렬 곱셈 (matmul 사용)
matrix_product = np.matmul(x, y) # 행렬 곱셈 전용
print("행렬 곱셈 (matmul 사용):\n", matrix_product)
```

#### 원소별 곱셈
행렬의 크기가 같은 경우, 각 원소별로 곱셈을 수행 할 수 있음

```{python}
z = np.arange(10, 14).reshape((2, 2))

y = np.array([[1, 2], [3, 4]])

# 원소별 곱셈 계산
elementwise_product = y * z
elementwise_product

```

#### 행렬의 역행렬
np.linalg.inv() - 함수 사용(행렬의 역행렬 반환)
역행렬이 존재하지 않는 경우 오류 반환
```{python}
# 2행 2열의 정사각행렬 y 생성
y = np.array([[1, 2], [3, 4]])

# 행렬 y의 역행렬 계산
inverse_y = np.linalg.inv(y)
inverse_y

```

### NumPy 배열 기본 제공 함수들 
sum()  
axis = 0(열별 합계), axis = 1(행별 합계)  

```{python}
import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

print("열별 합계:", a.sum(axis=0))
print("행별 합계:", a.sum(axis=1))
```

mean()  
axis = 0(열별 평균) axis = 1(행별 평균)
```{python}
print("열별 평균:", a.mean(axis=0))
print("행별 평균:", a.mean(axis=1))
```

max()  
axis = 0(열별 최대값), axis = 1(행별 최대값)
```{python}
print("열별 최댓값:", a.max(axis=0))
print("행별 최댓값:", a.max(axis=1))
```

min()  
axis = 0(열별 최솟값), axis = 1(행별 최솟값)
```{python}
print("열별 최솟값:", a.min(axis=0))
print("행별 최솟값:", a.min(axis=1))
```

std()  
ddof 옵션을 사용하여 자유도 조정 가능
```{python}
# ddof = 1은 n-1로 나누어준것을 표현함(표본 표준편차)
print("표본 표준편차 (ddof=1):", a.std(ddof=1))
```

var()  
ddof 옵션을 사용하여 자유도 조정 가능
```{python}
print("표본 분산 (ddof=1):", a.var(ddof=1))
```

cumsum()  
배열 원소들의 누적 합계를 반환  
axis = 0(열별 누적합계), axis = 1(행별 누적합계)
```{python}
print("열별 누적 합계:", a.cumsum(axis=0))
print("행별 누적 합계:", a.cumsum(axis=1))
```

cumprod()  
배열 원소들의 누적 곱을 반환  
axis = 0(열별 누적 곱), axis = 1(행별 누적곱)
```{python}
print("열별 누적 곱:", a.cumprod(axis=0))
print("행별 누적 곱:", a.cumprod(axis=1))
```

argmax()  
배열 원소들 중 최댓값의 인덱스를 반환  
axis = 0(열별 최댓값), axis = 1(행별 최댓값)
```{python}
print("최댓값의 인덱스 (열별):", a.argmax(axis=0))
print("최댓값의 인덱스 (행별):", a.argmax(axis=1))
```


argmin()  
배열 원소들 중 최솟값의 인덱스를 반환  
axis = 0(열별 최댓값의 인덱스), axis =1(행별 최댓값의 인덱스)
```{python}
print("최솟값의 인덱스 (열별):", a.argmin(axis=0))
print("최솟값의 인덱스 (행별):", a.argmin(axis=1))
```

reshape()  
배열 형상을 반환
```{python}
b = np.array([1, 2, 3, 4, 5, 6])
print("형상 변경:\n", b.reshape((2, 3)))
```

transpose()  
배열을 전치
```{python}
c = np.array([[1, 2, 3], [4, 5, 6]])
print("전치 배열:\n", c.transpose())
```

flatten()  
1차원 배열로 전환
```{python}
print("1차원 배열:\n", c.flatten())
```

clip()  
배열의 각 원소들을 주어진 최소값과 최대값의 범위로 자르는 역활을 함.
```{python}
d = np.array([1, 2, 3, 4, 5])
print("클립된 배열:", d.clip(2, 4))
```

tolist()  
배열을 리스트로 변환
```{python}
print("리스트:", d.tolist())
```

astype()  
배열 원소들의 타입을 변환
```{python}
e = np.array([1.1, 2.2, 3.3])
print("정수형 배열:", e.astype(int))
```

copy()  
배열의 복사본을 반환
```{python}
f = d.copy()
print("복사본 배열:", f)
```


#### 얕은/깊은 복사의 개념 이해하기
변수 d와 f가 연결되어 있어 f의 값을 변경하게 되면,  
연결되어있는 d의 값 역시 변화는 것을 알 수 있다.
```{python}
# 얕은 복사
import numpy as np
d = np.array([1, 2, 3, 4, 5])
f = d
f[0] = 10

print("d:", d)
print("f:", f)
```

f의 값이 변해도 d값이 변하지 않는 독립적인 변수가 되었음. 
```{python}
# 깊은 복사
import numpy as np
d = np.array([1, 2, 3, 4, 5])
f = d.copy()
f[0] = 10
print("d:", d)

print("f:", f)
```


sort()
배열을 정렬
```{python}
g = np.array([3, 1, 2])
g.sort()
print("정렬된 배열:", g)
```

argsort()
배열의 원소들을 정렬했을때 인덱스를 반환
```{python}
h = np.array([3, 1, 2])
print("정렬된 인덱스:", h.argsort())
```

### NumPy 배열에 apply함수 적용

apply_along_axis()  
넘파이 배열에 함수를 적용
```{python}
array_3d = np.arange(1, 25).reshape(2, 4, 3).transpose(0, 2, 1)
print(array_3d)

# 같은 위치에 있는 값들끼리 비교
def my_func(x):
  return np.min(x)
np.apply_along_axis(my_func, axis=0, arr=array_3d)

# 같은 깊이의 행별 최소값
np.apply_along_axis(my_func, axis=1, arr=array_3d)

# 같은 깊이의 열별 최소값
np.apply_along_axis(my_func, axis=2, arr=array_3d)
```