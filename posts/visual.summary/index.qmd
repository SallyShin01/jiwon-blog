---
title: "Visual 개념정리"
date : "2025-03-17"
author: "Jiwon Shin"
categories: [news, code]
image: "seaborn.jpg"
---

데이터 시각화 배우기!!!

## 데이터 시각화 배우기

### 파이썬 시각화 라이브러리

-   Matplotlib : 기본적 시각화 라이브러리

-   Seaborn : 통계적 데이터 시각화에 특화

-   Pandas : 데이터프레임에서 간단한 그래프 출력 가능

### Matplotlib 기본 활용법

```{python}
import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4])
plt.xlabel('This is also NUmbers')
plt.ylabel('Some Numbers')
plt.show()
```

-\> plot()에 단일 리스트 \[1,2,3,4\]를 넣으면, y값으로 해석하고 자동으로 x값을 \[0,1,2,3\]으로 설정!

### X-Y 데이터 시각화

```{python}
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
plt.show()
```

#### Problem 1. y = x\^3 그래프를 그리고 싶다. x축 -10.10까지 범위를 생각하고, y축은 해당하는 값을 발생시켜라!

```{python}
import numpy as np
x = np.arange(-10, 11, 0.5)
y = x**3
plt.plot(x, y, 'ro')  # ro = red circle; r^ = red rectangle; 
plt.axis([0, 6, 0, 20]) # 축범위 (0,6) - x축 범위; (0,20) -y축 범위
plt.xlabel('x')
plt.ylabel('y')
plt.show()
```

-   plot()은 선스타일 및 마커 지정 ('ro' -\> red circle)

### 여러개의 그래프 그리기

```{python}
import numpy as np
t = np.arange(0., 5., 0.2)  # 0~5 사이 0.2 간격격
plt.plot(t, t, 'r--',  # 빨간색 점선
         t, t**2, 'bs',  # 파란색 정사각형 마커
         t, t**3, 'g^')  # 초록색 삼각형 마커
plt.show()
```

#### Problem 2. 펭귄 데이터 불러와 부리길이 및 깊이 (x,y) 순서쌍 그래프

```{python}
from palmerpenguins import load_penguins
penguins = load_penguins()

x = penguins['bill_length_mm']
y = penguins['bill_depth_mm']
plt.plot(x,y,'ro')
plt.xlabel('bill_legnth')
plt.ylabel('bill_depth')
plt.show()
```

### scatter() - 데이터 딕셔너리

```{python}
mydata = {'x': np.arange(50),
          'y': np.random.randn(50) * 10}
plt.scatter('x', 'y', data=mydata)  
plt.xlabel('X Values')
plt.ylabel('Y Values')
plt.show()
```

### scatter() - 데이터프레임

```{python}
import pandas as pd
data = {'my_x': np.arange(50),
          'my_y': np.random.randn(50) * 10}
mydata = pd.DataFrame(data)
mydata.head()
plt.scatter('my_x', 'my_y', data=mydata)  
plt.show()
```

### 범주형 데이터 시각화

```{python}
# 서브 플랏
names = ['A', 'B', 'C']
values = [1, 10, 100]
plt.figure(figsize=(9, 3))
plt.subplot(132)
plt.bar(names, values)  # 막대 그래프
plt.subplot(231)
plt.scatter(names, values)  # 산점도
plt.subplot(233)
plt.plot(names, values)  # 선 그래프
plt.suptitle('Categorical Plotting')
plt.show()
```

### 여러개의 서브플롯 만들기

```{python}
def f(t):
 return np.exp(-t) * np.cos(2*np.pi*t)

 t = np.arange(0., 5., 0.1)
 t2 = np.arange(0., 5., 0.02)
 plt.figure()
 plt.subplot(211)
 plt.plot(t, f(t), 'bo', # 파란색 동그라미
          t2, f(t2), 'k')   # 검은선
 plt.subplot(212)
 plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
 plt.show()
```

### 텍스트 추가 및 주석 처리

text(x,y,'내용') 사용시 특정 위치에 텍스트 추가

```{python}
plt.plot([1, 2, 3, 4], [10, 20, 30, 40])
plt.text(2, 25, 'LS Bigdata School', fontsize=15)
plt.show()
```

### 제목, X축, Y축, 범례 지정

-   plt.title('Example Plot') -\> 그래프 제목 지정

-   plt.xlabel('X Axis'), plt.ylabel('Y Axis') -\> x,y축 텍스트 추가

-   plt.legend(loc = 'upper left') -\> 범례 표시 및 위치 지정

```{python}
plt.plot([1, 2, 3, 4], [1, 4, 9, 16], label="test")
plt.title("Example Plot")  # 그래프 제목 추가
plt.xlabel("X Axis")  # x축 라벨 추가
plt.ylabel("Y Axis")  # y축 라벨 추가
plt.legend(loc="lower right")  # 범례 추가 (위치)
plt.show()
```

## 데이터 시각화 개요

```{python}
df = pd.read_csv('c:\\Users\\USER\\Documents\\lsbigdata-gen4\\data\\Obesity2.csv')
df.info()
```

### 히스토그램

-   연속형 데이터 분포를 나타내는 그래프

-   데이터를 특정 구간으로 나누고 빈도(bin)수를 막대의 높이로 표현

-   데이터의 분포 형태 확인 및 이상치 탐색

```{python}
plt.hist(df['Age'],
          bins=20,
          alpha=0.1, # 막대의 투명도
          edgecolor='black')
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.show()

# Age 변수 이상치 판단 후 삭제
df = df.loc[~(df['Age'] >= 100), :]
df
```

#### Scott's Rule (상자개수 구하기)

```{python}
n = df['Age'].size
h = 3.5 * np.std(df['Age']) / n**(1/3)
int((max(df['Age']) - min(df['Age'])) / h)
```

### 밀도곡선(Density Plot)

-   히스토그램과 유사하지만 KDE를 사용하여 부드러운 형태로 변환

-   확률 밀도 함수의 추정값을 시각적으로 확인 가능

```{python}
import seaborn as sns
import matplotlib.pyplot as plt
sns.kdeplot(df['Age'], shade=True)
plt.xlabel("Age")
plt.ylabel("Density")
plt.show()

# 밴드위스 조정
sns.kdeplot(df['Age'], bw_method=0.01, shade =True)
sns.kdeplot(df['Age'], bw_method=0.1, shade =True)
sns.kdeplot(df['Age'], bw_method=0.5, shade =True)
```

### 막대그래프(Bar Chart)

-   범주형 데이터의 빈도나 특정 값의 크기를 비교하는 그래프

-   그룹별 비교 및 카테고리별 값의 차이 확인

```{python}
category_counts = df['NObeyesdad'].value_counts()
plt.figure(figsize=(6,5))
sns.barplot(x = category_counts.index,
            y = category_counts.values,
            palette = 'magma') # palette: magama/rocket/....
plt.xlabel("Obesity Level")
plt.ylabel("Count")
plt.ylim(250,350)
plt.title("Bar Chart of Obesity Levels")
plt.xticks(rotation=45)
plt.show()
```


### Box Plot(상자 그림)

-   데이터의 분포와 이상치를 확인하는 그래프

-   최소값, Q1,Q2(중앙값),Q3, 최대값, 이상치(outlier) 표시

-   이상치 판단 기준

    1.  IQR = Q3 - Q1

    2.  데이터 중 Q1과 Q3 1.5\*IQR 범위 밖의 데이터는 '이상치 분류'

#### Problem3. 다음의 Q1,Q2,Q3의 값 및

```{python}
np.random.seed(25317)
x = np.random.randint(1, 21, size = 15)
np.sort(x)
#  1,  3,  3,  5,  5,  6,  6,  8, 11, 13, 13, 15, 18, 18, 20

q2 = 8

np.sort(x[x<q2])
q1 = 5

np.sort(x[x>q2])
q3 = 15

q1,q2,q3

IQR = q3 - q1

# 이상치 계산 
# 상위 이상치
1.5*IQR

# 하위 이상치
-1.5*IQR
```

```{python}
plt.figure(figsize=(6,5))
sns.boxplot(x=df['NObeyesdad'], 
            y=df['Weight'], 
            palette="Pastel1")
plt.xlabel("Obesity Level")
plt.ylabel("Weight")
plt.title("Box Plot of Weight by Obesity Level")
plt.xticks(rotation=45)
plt.show()
```

### 산점도(Scatter Plot)

```{python}
#  비만 종류별(NObeyesdad) 데이터 포인트 색깔을 변경해보세요!
sns.scatterplot(data=df, x="Height", y="Weight", 
                hue="NObeyesdad", # 종류별로 다른 색깔
                style = 'NObeyesdad',  # 종류별로 다른 모양
                )
plt.title("Scatter Plot of Height vs Weight")
plt.show()
```

### 히트맵(HeatMap)

-   데이터 행렬의 색상을 색깔로 표현한 그래프

-   상관관계 분석 그래프

```{python}
# 상관행렬 계산
corr_matrix = df[['Age', 'Height', 'Weight']].corr()
# 히트맵 그리기
plt.figure(figsize=(6,5))
sns.heatmap(corr_matrix,
            annot=True, # 그래프 글씨 유무
            cmap="coolwarm",
            fmt = ".2f", linewidths=0.5)
plt.title("Heatmap of Feature Correlations")
plt.show()
```

### 시계열라인 그래프(Time Series Line Graph)

-   시간에 따른 값의 변화를 나타낸 그래프

-   X축이 시간, Y축이 해당하는 시간의 값

-   추세 분석이 목적

```{python}
dates = pd.date_range(start='2023-01-01', periods=30, freq='D')
values = np.cumsum(np.random.randn(30)) + 5

df_timeseries = pd.DataFrame({"Date": dates, "Value": values})

# 시계열 그래프 생성
plt.figure(figsize=(8, 5))
plt.plot(df_timeseries['Date'], df_timeseries['Value'], marker='o', linestyle='-')
plt.xlabel("Date")
plt.ylabel("Value")
plt.title("Time Series Line Graph")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()
```

### 모자이크 그래프(Mosaic Plot)

-   두 개이상의 범주형 변수 간의 관계를 시각화 하는 그래프

-   범주형 데이터 간의 관계 분석이 목적

```{python}
from statsmodels.graphics.mosaicplot import mosaic
import matplotlib.pyplot as plt

 # 모자이크 그래프 그리기
plt.figure(figsize=(8,5))
mosaic(df, ['Gender', 'NObeyesdad'], 
       title= "Mosaic Plot of Gender vs Obesity level")
plt.show()
```