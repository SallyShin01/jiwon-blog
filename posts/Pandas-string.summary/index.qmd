---
title: "Pandas string 개념정리"
date : "2025-03-11"
author: "Jiwon Shin"
categories: [news, code]
image: "Pandas-logo.webp"
---

## 날짜 및 문자형 변수 다루기
Pandas string 개념정리!!

### 날짜와 시간 다루기
```{python}
# 예제 데이터
import numpy as np 
import pandas as pd  
import warnings 
warnings.filterwarnings("ignore", category=pd.errors.SettingWithCopyWarning)

data = {
    'date': ['2024-01-01 12:34:56', '2024-02-01 23:45:01', '2024-03-01 06:07:08'],
    'value': [100, 201, 302]
}
df = pd.DataFrame(data)
df.info()
```

#### 날짜 형식으로 변환
```{python}
# 문자열을 날짜 형식으로 변환
# to_datetime() 활용하여 날짜 형식 변환
df['date'] = pd.to_datetime(df['date'])
print(df.dtypes)
```

#### 날짜 형식 변환시 주의사항
```{python}
# 올바른 형식
pd.to_datetime('03-11-2025')
pd.to_datetime('2025-03-11')
pd.to_datetime('2025/03/11')
pd.to_datetime('03/11/2025')

# pd.to_datetime('11/2024/03') 입력형식이 맞지 않음
pd.to_datetime('11-2025-03', format='%d-%Y-%m')
pd.to_datetime('11-25-03', format='%d-%y-%m')
```

#### 날짜 정보 추출
```{python}
dt_obj = pd.to_datetime('2025년 03월 11일',
                        format='%Y년 %m월 %d일')
dt_obj.year
dt_obj.month
dt_obj.day
dt_obj.hour
dt_obj.minute
dt_obj.second
dt_obj.day_name()
dt_obj.weekday()
```

날짜 정보 추출
```{python}
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day'] = df['date'].dt.day
df['hour'] = df['date'].dt.hour
df['minute'] = df['date'].dt.minute
df['second'] = df['date'].dt.second
df
```

날짜 계산
```{python}
current_date = pd.to_datetime('2025-03-11')
current_date - df['date']
```

날짜 벡터 만들기
```{python}
# 날짜 하루하루씩 전부 다 출력이 된다
pd.date_range(start='2021-01-01', 
              end='2022-01-10', freq='D')

# 각 월의 마지막 날짜만 출력이 된다
pd.date_range(start='2016-01-01', 
              end='2022-01-10', freq='ME')
```

날짜 합치기
```{python}
df.year
df.month
df.day

pd.to_datetime(dict(year=df.year, 
                    month=df.month, 
                    day=df.day))
```

### 문자열 다루기
```{python}
data = {
    '가전제품': ['냉장고', '세탁기', '전자레인지', '에어컨', '청소기'],
    '브랜드': ['LG', 'Samsung', 'Panasonic', 'Daikin', 'Dyson']
}
df = pd.DataFrame(data)
```

문자열 길이 확인  
str.lem()를 이용하여 문자열길이 확인인
```{python}
df['가전제품'].str.len()
```

문자 대/소문자 변환
str.lower(),str.upper() 이용하여 대소문자 변환
```{python}
# 문자 대/소문자 변환
df['브랜드'].str.lower()
df['브랜드'].str.upper()
df['브랜드'].str.title()
```