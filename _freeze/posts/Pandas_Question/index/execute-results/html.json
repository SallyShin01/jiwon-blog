{
  "hash": "fa1586830933d8831fe752dcfc36433b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pandas 연습문제제\"\ndate : \"2025-03-13\"\nauthor: \"Jiwon Shin\"\ncategories: [Question, code]\nimage: \"Pandas-logo.webp\"\n---\n\n\nPandas 문제풀이 !!\n\n## 판다스 연습 문제\n\n### 학교 성적데이터\n\n::: {#6916c48b .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd \ndf = pd.read_csv('c:\\\\Users\\\\USER\\\\Documents\\\\lsbigdata-gen4\\\\data\\\\grade.csv')\ndf.head()\ndf.info()\n\ndf['student_id'] =df['student_id'].astype('object')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 6 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   student_id  10 non-null     int64 \n 1   name        10 non-null     object\n 2   gender      10 non-null     object\n 3   midterm     10 non-null     int64 \n 4   final       10 non-null     int64 \n 5   assignment  10 non-null     int64 \ndtypes: int64(4), object(2)\nmemory usage: 612.0+ bytes\n```\n:::\n:::\n\n\nQ. df 데이터 프레임의 정보를 출력하고, 각 열의 데이터 타입을 확인하세요.\n\n::: {#548005fd .cell execution_count=2}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 6 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   student_id  10 non-null     object\n 1   name        10 non-null     object\n 2   gender      10 non-null     object\n 3   midterm     10 non-null     int64 \n 4   final       10 non-null     int64 \n 5   assignment  10 non-null     int64 \ndtypes: int64(3), object(3)\nmemory usage: 612.0+ bytes\n```\n:::\n:::\n\n\nQ. midterm 점수가 85점 이상인 학생들의 데이터를 필터링하여 출력하세요.\n\n::: {#590516f2 .cell execution_count=3}\n``` {.python .cell-code}\ndf[df['midterm'] >= 85]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>name</th>\n      <th>gender</th>\n      <th>midterm</th>\n      <th>final</th>\n      <th>assignment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Alice</td>\n      <td>F</td>\n      <td>85</td>\n      <td>88</td>\n      <td>95</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Charlie</td>\n      <td>M</td>\n      <td>92</td>\n      <td>94</td>\n      <td>87</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>David</td>\n      <td>M</td>\n      <td>88</td>\n      <td>90</td>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>Frank</td>\n      <td>M</td>\n      <td>95</td>\n      <td>97</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>Grace</td>\n      <td>F</td>\n      <td>89</td>\n      <td>91</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>Hannah</td>\n      <td>F</td>\n      <td>90</td>\n      <td>92</td>\n      <td>90</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nQ. final 점수를 기준으로 데이터 프레임을 내림차순으로 정렬하고, 정렬된 데이터 프레임의 첫 5행을 출력하세요.\n\n::: {#2a704529 .cell execution_count=4}\n``` {.python .cell-code}\nsort_df = df.sort_values(by='final', ascending = False)\nsort_df\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>name</th>\n      <th>gender</th>\n      <th>midterm</th>\n      <th>final</th>\n      <th>assignment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>Frank</td>\n      <td>M</td>\n      <td>95</td>\n      <td>97</td>\n      <td>98</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Charlie</td>\n      <td>M</td>\n      <td>92</td>\n      <td>94</td>\n      <td>87</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>Hannah</td>\n      <td>F</td>\n      <td>90</td>\n      <td>92</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>Grace</td>\n      <td>F</td>\n      <td>89</td>\n      <td>91</td>\n      <td>84</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>David</td>\n      <td>M</td>\n      <td>88</td>\n      <td>90</td>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Alice</td>\n      <td>F</td>\n      <td>85</td>\n      <td>88</td>\n      <td>95</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>Jack</td>\n      <td>M</td>\n      <td>84</td>\n      <td>86</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Eve</td>\n      <td>F</td>\n      <td>76</td>\n      <td>79</td>\n      <td>77</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>Ivan</td>\n      <td>M</td>\n      <td>77</td>\n      <td>78</td>\n      <td>81</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Bob</td>\n      <td>M</td>\n      <td>78</td>\n      <td>74</td>\n      <td>82</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nQ. gender 열을 기준으로 데이터 프레임을 그룹화하고, 각 그룹별 midterm과 final의 평균을 계산하여 출력하세요.\n\n::: {#3c706e11 .cell execution_count=5}\n``` {.python .cell-code}\ngender_average = df.groupby('gender')[['midterm','final']].mean()\ngender_average\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>midterm</th>\n      <th>final</th>\n    </tr>\n    <tr>\n      <th>gender</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>F</th>\n      <td>85.000000</td>\n      <td>87.5</td>\n    </tr>\n    <tr>\n      <th>M</th>\n      <td>85.666667</td>\n      <td>86.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nQ. student_id 열을 문자열 타입으로 변환하고, 변환된 데이터 프레임의 정보를 출력하세요.\n\n::: {#ecb3c2a6 .cell execution_count=6}\n``` {.python .cell-code}\ndf['student_id'] = df['student_id'].astype(float)\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 6 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   student_id  10 non-null     float64\n 1   name        10 non-null     object \n 2   gender      10 non-null     object \n 3   midterm     10 non-null     int64  \n 4   final       10 non-null     int64  \n 5   assignment  10 non-null     int64  \ndtypes: float64(1), int64(3), object(2)\nmemory usage: 612.0+ bytes\n```\n:::\n:::\n\n\nQ. assignment 점수의 최대값과 최소값을 가지는 행을 각각 출력하세요.\n\n::: {#8bffe12d .cell execution_count=7}\n``` {.python .cell-code}\n# 최대값 가지는 행\nmax_score = df['assignment'].idxmax()\ndf.loc[max_score]\n\n# 최소값 가지는 행\nmin_score = df['assignment'].idxmin()\ndf.loc[min_score]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nstudent_id    5.0\nname          Eve\ngender          F\nmidterm        76\nfinal          79\nassignment     77\nName: 4, dtype: object\n```\n:::\n:::\n\n\nQ. midterm, final, assignment 점수의 평균을 계산하여 average 열을 추가하고, 첫 5행을 출력하세요.\n\n::: {#70b0cf1e .cell execution_count=8}\n``` {.python .cell-code}\ndf['average'] = df[['midterm','final','assignment']].mean(axis = 1)\ndf.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>name</th>\n      <th>gender</th>\n      <th>midterm</th>\n      <th>final</th>\n      <th>assignment</th>\n      <th>average</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>Alice</td>\n      <td>F</td>\n      <td>85</td>\n      <td>88</td>\n      <td>95</td>\n      <td>89.333333</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>Bob</td>\n      <td>M</td>\n      <td>78</td>\n      <td>74</td>\n      <td>82</td>\n      <td>78.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.0</td>\n      <td>Charlie</td>\n      <td>M</td>\n      <td>92</td>\n      <td>94</td>\n      <td>87</td>\n      <td>91.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.0</td>\n      <td>David</td>\n      <td>M</td>\n      <td>88</td>\n      <td>90</td>\n      <td>85</td>\n      <td>87.666667</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>Eve</td>\n      <td>F</td>\n      <td>76</td>\n      <td>79</td>\n      <td>77</td>\n      <td>77.333333</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nQ. 아래의 추가 데이터를 생성하고, 기존 데이터 프레임과 student_id를 기준으로 **병합하여 출력하**세요. -\\> **merge() !!!**\n\n::: {#0adaf41c .cell execution_count=9}\n``` {.python .cell-code}\n# 추가 데이터 생성\nadditional_data = {\n'student_id': ['1', '3', '5', '7', '9'],\n'club': ['Art', 'Science', 'Math', 'Music', 'Drama']\n}\ndf_additional = pd.DataFrame(additional_data)\n\nprint(df['student_id'].dtype)\nprint(df_additional['student_id'].dtype)\n\ndf['student_id'] = df['student_id'].astype(str)\ndf_additional['student_id'] = df_additional['student_id'].astype(str)\n\n## 데이터 병합 -> merge() !!!\nmerged_df = pd.merge(df, df_additional, on ='student_id',how = 'left')\nmerged_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfloat64\nobject\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>name</th>\n      <th>gender</th>\n      <th>midterm</th>\n      <th>final</th>\n      <th>assignment</th>\n      <th>average</th>\n      <th>club</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>Alice</td>\n      <td>F</td>\n      <td>85</td>\n      <td>88</td>\n      <td>95</td>\n      <td>89.333333</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>Bob</td>\n      <td>M</td>\n      <td>78</td>\n      <td>74</td>\n      <td>82</td>\n      <td>78.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.0</td>\n      <td>Charlie</td>\n      <td>M</td>\n      <td>92</td>\n      <td>94</td>\n      <td>87</td>\n      <td>91.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.0</td>\n      <td>David</td>\n      <td>M</td>\n      <td>88</td>\n      <td>90</td>\n      <td>85</td>\n      <td>87.666667</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>Eve</td>\n      <td>F</td>\n      <td>76</td>\n      <td>79</td>\n      <td>77</td>\n      <td>77.333333</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6.0</td>\n      <td>Frank</td>\n      <td>M</td>\n      <td>95</td>\n      <td>97</td>\n      <td>98</td>\n      <td>96.666667</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7.0</td>\n      <td>Grace</td>\n      <td>F</td>\n      <td>89</td>\n      <td>91</td>\n      <td>84</td>\n      <td>88.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8.0</td>\n      <td>Hannah</td>\n      <td>F</td>\n      <td>90</td>\n      <td>92</td>\n      <td>90</td>\n      <td>90.666667</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9.0</td>\n      <td>Ivan</td>\n      <td>M</td>\n      <td>77</td>\n      <td>78</td>\n      <td>81</td>\n      <td>78.666667</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10.0</td>\n      <td>Jack</td>\n      <td>M</td>\n      <td>84</td>\n      <td>86</td>\n      <td>88</td>\n      <td>86.000000</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nQ. gender를 인덱스로, student_id를 열로 사용하여 average 점수에 \n대한 피벗 테이블을 생성하고 출력하세요.\n\n::: {#b6eae42d .cell execution_count=10}\n``` {.python .cell-code}\ndf_pivot = df.pivot_table(\n    index = 'gender',\n    columns = 'student_id',\n    values = 'average').reset_index()\ndf_pivot\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>student_id</th>\n      <th>gender</th>\n      <th>1.0</th>\n      <th>10.0</th>\n      <th>2.0</th>\n      <th>3.0</th>\n      <th>4.0</th>\n      <th>5.0</th>\n      <th>6.0</th>\n      <th>7.0</th>\n      <th>8.0</th>\n      <th>9.0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>F</td>\n      <td>89.333333</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>77.333333</td>\n      <td>NaN</td>\n      <td>88.0</td>\n      <td>90.666667</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>NaN</td>\n      <td>86.0</td>\n      <td>78.0</td>\n      <td>91.0</td>\n      <td>87.666667</td>\n      <td>NaN</td>\n      <td>96.666667</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>78.666667</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nQ. midterm, final, assignment의 평균을 구하고, average 열을 생성하시오.성별, 성적 유형(assignment, average, final, midterm)별 \n평균 점수를 계산하시오.\n\n::: {#47ff384d .cell execution_count=11}\n``` {.python .cell-code}\ndf['average'] = df[['midterm','final','assignment']].mean(axis=1)\ndf\n\n# melt() 사용하여 데이터 프레임 변경!\ndf_melted = pd.melt(df,\n            id_vars = ['student_id','name','gender'],\n            value_vars = ['assignment','final','average','midterm'],\n            var_name = 'variable',\n            value_name = 'score')\n\n\naverage_score = df_melted.groupby(['gender','variable'])['score'].mean().reset_index()\naverage_score\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>variable</th>\n      <th>score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>F</td>\n      <td>assignment</td>\n      <td>86.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>F</td>\n      <td>average</td>\n      <td>86.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>F</td>\n      <td>final</td>\n      <td>87.500000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>F</td>\n      <td>midterm</td>\n      <td>85.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>M</td>\n      <td>assignment</td>\n      <td>86.833333</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>M</td>\n      <td>average</td>\n      <td>86.333333</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>M</td>\n      <td>final</td>\n      <td>86.500000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>M</td>\n      <td>midterm</td>\n      <td>85.666667</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nQ. midterm, final, assignment의 평균을 구하고, average 열을 생성하시오. 또한, 최대 평균 성적을 가진 학생의 이름과 평균 성적을 출력하시오.\n\n::: {#9ce0c5e8 .cell execution_count=12}\n``` {.python .cell-code}\ndf['average'] = df[['midterm','final','assignment']].mean(axis=1)\n\nmax_idx = df['average'].idxmax()\ndf.loc[max_idx,['name','average']]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nname           Frank\naverage    96.666667\nName: 5, dtype: object\n```\n:::\n:::\n\n\n### 공유 자전거 데이터\n\n::: {#ddb8a686 .cell execution_count=13}\n``` {.python .cell-code}\ndf = pd.read_csv('c:\\\\Users\\\\USER\\\\Documents\\\\lsbigdata-gen4\\\\data\\\\bike_data.csv')\n\n# 데이터 속성변환\ndf = df.astype({'datetime': 'datetime64[ns]',\n                'weather': 'int64',\n                'season': 'object',\n                'workingday': 'object',\n                'holiday': 'object',\n                })\n```\n:::\n\n\nQ. 계절(season) == 1일 때, 가장 대여량이 많은 시간대(hour)을 구하시오.\n\n::: {#ec5fbbee .cell execution_count=14}\n``` {.python .cell-code}\n# 계절이 1인 부분만 추출\ndf_sub = df.loc[df.season == 1, ]\n\n# 시간정보 추출\ndf_sub['hour'] = df_sub['datetime'].dt.hour\n\n## 계절별 및 시간대별 대여량 합계 계산\nsummary_data = (df_sub\n                .groupby(['season','hour'])\n                .agg({'count': 'sum'})\n                .reset_index())\n\nsummary_data.loc[summary_data['count'].idxmax(), 'hour'] \ndf['count'].max()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_16656\\1114509147.py:5: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n970\n```\n:::\n:::\n\n\nQ. 각 계절(season)별 평균 대여량(count)을 구하시오.\n\n::: {#68d71d4d .cell execution_count=15}\n``` {.python .cell-code}\ndf.groupby('season')['count'].mean().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>103.169811</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>218.803922</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>265.500000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>218.581197</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nQ. 특정 달(month) 동안의 총 대여량(count)을 구하시오.\n\n::: {#51279176 .cell execution_count=16}\n``` {.python .cell-code}\ndf['month'] = df['datetime'].dt.month\n\ndf.groupby('month')['count'].sum().reset_index()\n\n# 1월의 총대여량 \ndf[df['month'] == 1]['count'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n2567\n```\n:::\n:::\n\n\nQ. 가장 대여량이 많은 날짜를 구하시오.\n\n::: {#464f3990 .cell execution_count=17}\n``` {.python .cell-code}\ndf['date'] = df['datetime'].dt.date\n\ndf.groupby('date')['count'].sum().max()  # 가장 많은 대여량 합계\ndf.groupby('date')['count'].sum().idxmax() # 가장 많은 대여량 날짜\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\ndatetime.date(2012, 5, 11)\n```\n:::\n:::\n\n\nQ. 시간대(hour)별 평균 대여량(count)을 구하시오.\n\n::: {#0c243b1e .cell execution_count=18}\n``` {.python .cell-code}\ndf['hour'] = df['datetime'].dt.hour\n\ndf.groupby('hour')['count'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nhour\n0      43.500000\n1      52.714286\n2      32.842105\n3      12.000000\n4       6.687500\n5      17.750000\n6      58.705882\n7     208.937500\n8     483.055556\n9     260.117647\n10    144.130435\n11    182.000000\n12    277.533333\n13    290.600000\n14    266.842105\n15    255.666667\n16    373.052632\n17    519.200000\n18    447.769231\n19    322.103448\n20    210.083333\n21    196.619048\n22    113.560000\n23     77.352941\nName: count, dtype: float64\n```\n:::\n:::\n\n\nQ. 특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.\n\n::: {#3bca297f .cell execution_count=19}\n``` {.python .cell-code}\ndf['weekday'] = df['datetime'].dt.hour\n\ndf.groupby('weekday')['count'].sum()\n\n#월요일 총 대여량 (월요일 = 0)\ndf[df['weekday'] == 0]['count'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n870\n```\n:::\n:::\n\n\nQ.  주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여수를 포함하는 긴 형식 데이터프레임을 만드시오.\n\n::: {#f6561e43 .cell execution_count=20}\n``` {.python .cell-code}\ndf_melted = pd.melt(df,\n                    id_vars = ['datetime','season'],\n                    value_vars = ['casual','registered'],\n                    var_name = 'user_type',\n                    value_name = 'user_count')\ndf_melted\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>datetime</th>\n      <th>season</th>\n      <th>user_type</th>\n      <th>user_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011-09-05 17:00:00</td>\n      <td>3</td>\n      <td>casual</td>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011-05-17 11:00:00</td>\n      <td>2</td>\n      <td>casual</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2011-11-10 09:00:00</td>\n      <td>4</td>\n      <td>casual</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2011-10-13 07:00:00</td>\n      <td>4</td>\n      <td>casual</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2011-10-15 14:00:00</td>\n      <td>4</td>\n      <td>casual</td>\n      <td>242</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>865</th>\n      <td>2011-04-07 16:00:00</td>\n      <td>2</td>\n      <td>registered</td>\n      <td>161</td>\n    </tr>\n    <tr>\n      <th>866</th>\n      <td>2011-09-03 22:00:00</td>\n      <td>3</td>\n      <td>registered</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>867</th>\n      <td>2011-11-12 22:00:00</td>\n      <td>4</td>\n      <td>registered</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>868</th>\n      <td>2012-04-11 23:00:00</td>\n      <td>2</td>\n      <td>registered</td>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>869</th>\n      <td>2012-01-06 09:00:00</td>\n      <td>1</td>\n      <td>registered</td>\n      <td>237</td>\n    </tr>\n  </tbody>\n</table>\n<p>870 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nQ. 이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 casual과 \nregistered 사용자의 평균 대여 수(count)를 구하시오.\n\n::: {#c3f425c3 .cell execution_count=21}\n``` {.python .cell-code}\ndf_melted.groupby(['season','user_type'])['user_count'].mean().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>user_type</th>\n      <th>user_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>casual</td>\n      <td>14.122642</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>registered</td>\n      <td>89.047170</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>casual</td>\n      <td>48.990196</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>registered</td>\n      <td>169.813725</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>casual</td>\n      <td>55.127273</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>registered</td>\n      <td>210.372727</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>4</td>\n      <td>casual</td>\n      <td>29.709402</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4</td>\n      <td>registered</td>\n      <td>188.871795</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 로그 데이터\n\n::: {#ac815ece .cell execution_count=22}\n``` {.python .cell-code}\ndf = pd.read_csv('c:\\\\Users\\\\USER\\\\Documents\\\\lsbigdata-gen4\\\\data\\\\logdata.csv')\n```\n:::\n\n\nQ. 로그 칼럼에서 연도 정보만 추출하시오.\n\n::: {#73cf669b .cell execution_count=23}\n``` {.python .cell-code}\ndf['연도정보'] = df['로그'].str.extract(r'(\\d+)')\n```\n:::\n\n\nQ. 로그 칼럼에서 모든 시간 정보를 추출하시오.\n\n::: {#08c2a719 .cell execution_count=24}\n``` {.python .cell-code}\ndf['시간정보'] = df['로그'].str.extract(r'(\\d{2}:\\d{2}:\\d{2})')\n```\n:::\n\n\nQ. 로그 칼럼에서 한글 정보만 추출하시오.\n\n::: {#71b4e3d8 .cell execution_count=25}\n``` {.python .cell-code}\ndf['한글'] = df['로그'].str.extract(r'([가-힣]+)')\n```\n:::\n\n\nQ. 로그 칼럼에서 특수 문자를 제거하시오.\n\n::: {#05fe7edb .cell execution_count=26}\n``` {.python .cell-code}\ndf['로그'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', '',regex=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n0         20240718 123456 User 홍길동 Action Login ID12345\n1     20240718 123500 User 김철수 Action Purchase Amoun...\n2       20240718 123610 User 이영희 Action Logout Time 30s\n3         20240718 123722 User 박지성 Action Login ID67890\n4     20240718 123844 User 최강타 Action Purchase Amoun...\n5       20240718 123950 User 장보고 Action Logout Time 25s\n6     20240718 124056 User 홍길동 Action Purchase Amoun...\n7         20240718 124100 User 김철수 Action Login ID23456\n8     20240718 124210 User 이영희 Action Purchase Amoun...\n9       20240718 124322 User 박지성 Action Logout Time 45s\n10        20240718 124444 User 최강타 Action Login ID78901\n11    20240718 124550 User 장보고 Action Purchase Amoun...\n12      20240718 124656 User 홍길동 Action Logout Time 35s\n13    20240718 124700 User 김철수 Action Purchase Amoun...\n14        20240718 124810 User 이영희 Action Login ID56789\n15    20240718 124922 User 박지성 Action Purchase Amoun...\n16      20240718 125044 User 최강타 Action Logout Time 50s\n17        20240718 125150 User 장보고 Action Login ID34567\n18    20240718 125256 User 홍길동 Action Purchase Amoun...\n19      20240718 125300 User 김철수 Action Logout Time 20s\n20    20240718 125410 User 이영희 Action Purchase Amoun...\n21        20240718 125522 User 박지성 Action Login ID12346\n22    20240718 125644 User 최강타 Action Purchase Amoun...\n23      20240718 125750 User 장보고 Action Logout Time 55s\n24        20240718 125856 User 홍길동 Action Login ID67891\n25    20240718 125900 User 김철수 Action Purchase Amoun...\n26      20240718 130010 User 이영희 Action Logout Time 40s\n27    20240718 130122 User 박지성 Action Purchase Amoun...\n28        20240718 130244 User 최강타 Action Login ID78902\n29    20240718 130350 User 장보고 Action Purchase Amoun...\nName: 로그, dtype: object\n```\n:::\n:::\n\n\nQ. 로그 칼럼에서 유저, Amount 값을 추출한 후 각 유저별 \nAmount의 평균값을 계산하시오.\n\n::: {#86e34257 .cell execution_count=27}\n``` {.python .cell-code}\ndf['User'] = df['로그'].str.extract(r'User:\\s*([가-힣]+)')\ndf['Amount'] = df['로그'].str.extract(r'Amount:\\s*(\\d+)').astype(float)\n\ndf.groupby('User')['Amount'].mean().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>User</th>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>김철수</td>\n      <td>3666.666667</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>박지성</td>\n      <td>5750.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>이영희</td>\n      <td>4250.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>장보고</td>\n      <td>5750.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>최강타</td>\n      <td>3750.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>홍길동</td>\n      <td>4250.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}