{
  "hash": "cc6367ab82c57ba7723567467f199b90",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pandas string 개념정리\"\ndate : \"2025-03-11\"\nauthor: \"Jiwon Shin\"\ncategories: [news, code]\nimage: \"Pandas-logo.webp\"\n---\n\n\n## 날짜 및 문자형 변수 다루기\nPandas string 개념정리!!\n\n### 날짜와 시간 다루기\n\n::: {#05b2e73f .cell execution_count=1}\n``` {.python .cell-code}\n# 예제 데이터\nimport numpy as np \nimport pandas as pd  \nimport warnings \nwarnings.filterwarnings(\"ignore\", category=pd.errors.SettingWithCopyWarning)\n\ndata = {\n    'date': ['2024-01-01 12:34:56', '2024-02-01 23:45:01', '2024-03-01 06:07:08'],\n    'value': [100, 201, 302]\n}\ndf = pd.DataFrame(data)\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   date    3 non-null      object\n 1   value   3 non-null      int64 \ndtypes: int64(1), object(1)\nmemory usage: 180.0+ bytes\n```\n:::\n:::\n\n\n#### 날짜 형식으로 변환\n\n::: {#20a88f99 .cell execution_count=2}\n``` {.python .cell-code}\n# 문자열을 날짜 형식으로 변환\n# to_datetime() 활용하여 날짜 형식 변환\ndf['date'] = pd.to_datetime(df['date'])\nprint(df.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndate     datetime64[ns]\nvalue             int64\ndtype: object\n```\n:::\n:::\n\n\n#### 날짜 형식 변환시 주의사항\n\n::: {#821e3747 .cell execution_count=3}\n``` {.python .cell-code}\n# 올바른 형식\npd.to_datetime('03-11-2025')\npd.to_datetime('2025-03-11')\npd.to_datetime('2025/03/11')\npd.to_datetime('03/11/2025')\n\n# pd.to_datetime('11/2024/03') 입력형식이 맞지 않음\npd.to_datetime('11-2025-03', format='%d-%Y-%m')\npd.to_datetime('11-25-03', format='%d-%y-%m')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nTimestamp('2025-03-11 00:00:00')\n```\n:::\n:::\n\n\n#### 날짜 정보 추출\n\n::: {#0f3a1ef2 .cell execution_count=4}\n``` {.python .cell-code}\ndt_obj = pd.to_datetime('2025년 03월 11일',\n                        format='%Y년 %m월 %d일')\ndt_obj.year\ndt_obj.month\ndt_obj.day\ndt_obj.hour\ndt_obj.minute\ndt_obj.second\ndt_obj.day_name()\ndt_obj.weekday()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n1\n```\n:::\n:::\n\n\n날짜 정보 추출\n\n::: {#89c567ba .cell execution_count=5}\n``` {.python .cell-code}\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf['day'] = df['date'].dt.day\ndf['hour'] = df['date'].dt.hour\ndf['minute'] = df['date'].dt.minute\ndf['second'] = df['date'].dt.second\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>year</th>\n      <th>month</th>\n      <th>day</th>\n      <th>hour</th>\n      <th>minute</th>\n      <th>second</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2024-01-01 12:34:56</td>\n      <td>100</td>\n      <td>2024</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12</td>\n      <td>34</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2024-02-01 23:45:01</td>\n      <td>201</td>\n      <td>2024</td>\n      <td>2</td>\n      <td>1</td>\n      <td>23</td>\n      <td>45</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2024-03-01 06:07:08</td>\n      <td>302</td>\n      <td>2024</td>\n      <td>3</td>\n      <td>1</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n날짜 계산\n\n::: {#c5cfd059 .cell execution_count=6}\n``` {.python .cell-code}\ncurrent_date = pd.to_datetime('2025-03-11')\ncurrent_date - df['date']\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0   434 days 11:25:04\n1   403 days 00:14:59\n2   374 days 17:52:52\nName: date, dtype: timedelta64[ns]\n```\n:::\n:::\n\n\n날짜 벡터 만들기\n\n::: {#0c9b91c2 .cell execution_count=7}\n``` {.python .cell-code}\n# 날짜 하루하루씩 전부 다 출력이 된다\npd.date_range(start='2021-01-01', \n              end='2022-01-10', freq='D')\n\n# 각 월의 마지막 날짜만 출력이 된다\npd.date_range(start='2016-01-01', \n              end='2022-01-10', freq='ME')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nDatetimeIndex(['2016-01-31', '2016-02-29', '2016-03-31', '2016-04-30',\n               '2016-05-31', '2016-06-30', '2016-07-31', '2016-08-31',\n               '2016-09-30', '2016-10-31', '2016-11-30', '2016-12-31',\n               '2017-01-31', '2017-02-28', '2017-03-31', '2017-04-30',\n               '2017-05-31', '2017-06-30', '2017-07-31', '2017-08-31',\n               '2017-09-30', '2017-10-31', '2017-11-30', '2017-12-31',\n               '2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n               '2018-05-31', '2018-06-30', '2018-07-31', '2018-08-31',\n               '2018-09-30', '2018-10-31', '2018-11-30', '2018-12-31',\n               '2019-01-31', '2019-02-28', '2019-03-31', '2019-04-30',\n               '2019-05-31', '2019-06-30', '2019-07-31', '2019-08-31',\n               '2019-09-30', '2019-10-31', '2019-11-30', '2019-12-31',\n               '2020-01-31', '2020-02-29', '2020-03-31', '2020-04-30',\n               '2020-05-31', '2020-06-30', '2020-07-31', '2020-08-31',\n               '2020-09-30', '2020-10-31', '2020-11-30', '2020-12-31',\n               '2021-01-31', '2021-02-28', '2021-03-31', '2021-04-30',\n               '2021-05-31', '2021-06-30', '2021-07-31', '2021-08-31',\n               '2021-09-30', '2021-10-31', '2021-11-30', '2021-12-31'],\n              dtype='datetime64[ns]', freq='ME')\n```\n:::\n:::\n\n\n날짜 합치기\n\n::: {#103ae2f6 .cell execution_count=8}\n``` {.python .cell-code}\ndf.year\ndf.month\ndf.day\n\npd.to_datetime(dict(year=df.year, \n                    month=df.month, \n                    day=df.day))\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0   2024-01-01\n1   2024-02-01\n2   2024-03-01\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n### 문자열 다루기\n\n::: {#f3294a6e .cell execution_count=9}\n``` {.python .cell-code}\ndata = {\n    '가전제품': ['냉장고', '세탁기', '전자레인지', '에어컨', '청소기'],\n    '브랜드': ['LG', 'Samsung', 'Panasonic', 'Daikin', 'Dyson']\n}\ndf = pd.DataFrame(data)\n```\n:::\n\n\n문자열 길이 확인  \nstr.lem()를 이용하여 문자열길이 확인인\n\n::: {#cf004371 .cell execution_count=10}\n``` {.python .cell-code}\ndf['가전제품'].str.len()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0    3\n1    3\n2    5\n3    3\n4    3\nName: 가전제품, dtype: int64\n```\n:::\n:::\n\n\n문자 대/소문자 변환\nstr.lower(),str.upper() 이용하여 대소문자 변환\n\n::: {#ccfb1704 .cell execution_count=11}\n``` {.python .cell-code}\n# 문자 대/소문자 변환\ndf['브랜드'].str.lower()\ndf['브랜드'].str.upper()\ndf['브랜드'].str.title()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0           Lg\n1      Samsung\n2    Panasonic\n3       Daikin\n4        Dyson\nName: 브랜드, dtype: object\n```\n:::\n:::\n\n\n특정 문자 포함 여부확인  \nstr.contrains()를 통해 특정 문자 포함 여부 확인\n\n::: {#65ff9f31 .cell execution_count=12}\n``` {.python .cell-code}\n# 문자열 포함 여부\ndf['브랜드에_a포함'] = df['브랜드'].str.contains('a')\nprint(df[['브랜드', '브랜드에_a포함']].head(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       브랜드  브랜드에_a포함\n0       LG     False\n1  Samsung      True\n```\n:::\n:::\n\n\n특정 문자열 교체  \nstr.replace()를 통해 특정 문자열 교체\n\n::: {#d0a6a88f .cell execution_count=13}\n``` {.python .cell-code}\ndf['브랜드_언더스코어'] = df['브랜드'].str.replace('L', 'HHHHG')\nprint(df[['브랜드', '브랜드_언더스코어']].head(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       브랜드 브랜드_언더스코어\n0       LG    HHHHGG\n1  Samsung   Samsung\n```\n:::\n:::\n\n\n문자열 분할  \nstr.split()를 통해 문자열을 분할\n\n::: {#3cef4c31 .cell execution_count=14}\n``` {.python .cell-code}\n# 문자열 분할\ndf[['브랜드_첫부분', '브랜드_두번째', '브랜드_세번째']] = df['브랜드'].str.split('a', expand=True)\nprint(df[['브랜드', '브랜드_첫부분', '브랜드_두번째', '브랜드_세번째']].head(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       브랜드 브랜드_첫부분 브랜드_두번째 브랜드_세번째\n0       LG      LG    None    None\n1  Samsung       S   msung    None\n```\n:::\n:::\n\n\n문자열 결합\nstr.cat()를 통해 문자열을 결합\n\n::: {#49d1ce9f .cell execution_count=15}\n``` {.python .cell-code}\n# 문자열 결합\ndf['제품_브랜드'] = df['가전제품'].str.cat(df['브랜드'], sep=', ')\nprint(df[['가전제품', '제품_브랜드']].head(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  가전제품        제품_브랜드\n0  냉장고       냉장고, LG\n1  세탁기  세탁기, Samsung\n```\n:::\n:::\n\n\n문자열 공백제거\nstr.strip()를 통해 문자열 앞 뒤 공백을 제거\n\n::: {#33349b80 .cell execution_count=16}\n``` {.python .cell-code}\n# 문자열 앞뒤 공백 제거\ndf['가전제품'] = df['가전제품'].str.replace('전자레인지', ' 전자 레인지 ')\ndf['가전제품_공백제거'] = df['가전제품'].str.strip()\nprint(df[['가전제품', '가전제품_공백제거']].head(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  가전제품 가전제품_공백제거\n0  냉장고       냉장고\n1  세탁기       세탁기\n```\n:::\n:::\n\n\n### 정규표현식을 통한 문자열 추출\n\n::: {#3c7f444b .cell execution_count=17}\n``` {.python .cell-code}\ndata = {\n'주소': ['서울특별시 강남구! 테헤란로 123', \n       '부산광역시 해운대@구 센텀중앙로? 45', \n       '대구광역시 수성구 동대구로 77-4',\n       '경기도 안성시 서운면 바우덕이로 248']\n}\ndf = pd.DataFrame(data)\n```\n:::\n\n\n::: {#c05b7450 .cell execution_count=18}\n``` {.python .cell-code}\ndf['주소'].str.extract(r'([가-힣]+광역시|[가-힣]+특별시)', expand = False)\ndf['도시'] = df['주소'].str.extract(r'([가-힣]+광역시|[가-힣]+특별시)', expand=False)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>주소</th>\n      <th>도시</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>서울특별시 강남구! 테헤란로 123</td>\n      <td>서울특별시</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>부산광역시 해운대@구 센텀중앙로? 45</td>\n      <td>부산광역시</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>대구광역시 수성구 동대구로 77-4</td>\n      <td>대구광역시</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>경기도 안성시 서운면 바우덕이로 248</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n특수문자 추출 및 제거\n\n::: {#ba5e2c64 .cell execution_count=19}\n``` {.python .cell-code}\ndf['주소'].str.extractall(r'([^a-zA-Z0-9가-힣\\s])')\n\ndf['주소_특수문자제거'] = df['주소'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', '', regex=True)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>주소</th>\n      <th>도시</th>\n      <th>주소_특수문자제거</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>서울특별시 강남구! 테헤란로 123</td>\n      <td>서울특별시</td>\n      <td>서울특별시 강남구 테헤란로 123</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>부산광역시 해운대@구 센텀중앙로? 45</td>\n      <td>부산광역시</td>\n      <td>부산광역시 해운대구 센텀중앙로 45</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>대구광역시 수성구 동대구로 77-4</td>\n      <td>대구광역시</td>\n      <td>대구광역시 수성구 동대구로 774</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>경기도 안성시 서운면 바우덕이로 248</td>\n      <td>NaN</td>\n      <td>경기도 안성시 서운면 바우덕이로 248</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n테헤란로, 센텀중앙로, 바우덕이로 같은 도로명 칼럼 만들기\n\n::: {#2352b3d0 .cell execution_count=20}\n``` {.python .cell-code}\ndf['주소'] = df['주소'].str.replace(r'[^a-zA-Z0-9가-힣\\s]', '', regex=True)\ndf['도로명'] = df['주소'].str.extract(r'([가-힣]+로)',expand = False)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>주소</th>\n      <th>도시</th>\n      <th>주소_특수문자제거</th>\n      <th>도로명</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>서울특별시 강남구 테헤란로 123</td>\n      <td>서울특별시</td>\n      <td>서울특별시 강남구 테헤란로 123</td>\n      <td>테헤란로</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>부산광역시 해운대구 센텀중앙로 45</td>\n      <td>부산광역시</td>\n      <td>부산광역시 해운대구 센텀중앙로 45</td>\n      <td>센텀중앙로</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>대구광역시 수성구 동대구로 774</td>\n      <td>대구광역시</td>\n      <td>대구광역시 수성구 동대구로 774</td>\n      <td>동대구로</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>경기도 안성시 서운면 바우덕이로 248</td>\n      <td>NaN</td>\n      <td>경기도 안성시 서운면 바우덕이로 248</td>\n      <td>바우덕이로</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n숫자만 꺼내오려면?\n\n::: {#0912a7d3 .cell execution_count=21}\n``` {.python .cell-code}\ndf['주소'].str.extract(r'([0-9]+)')\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>123</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>774</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>248</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}