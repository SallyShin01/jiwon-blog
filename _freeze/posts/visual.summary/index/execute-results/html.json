{
  "hash": "485ec022f0b425a7b0f6bdc2f5e59a94",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Visual 개념정리\"\ndate : \"2025-03-17\"\nauthor: \"Jiwon Shin\"\ncategories: [news, code]\nimage: \"seaborn.jpg\"\n---\n\n\n데이터 시각화 배우기!!!\n\n## 데이터 시각화 배우기\n\n### 파이썬 시각화 라이브러리\n\n-   Matplotlib : 기본적 시각화 라이브러리\n\n-   Seaborn : 통계적 데이터 시각화에 특화\n\n-   Pandas : 데이터프레임에서 간단한 그래프 출력 가능\n\n### Matplotlib 기본 활용법\n\n::: {#62639fe9 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4])\nplt.xlabel('This is also NUmbers')\nplt.ylabel('Some Numbers')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=589 height=429}\n:::\n:::\n\n\n-\\> plot()에 단일 리스트 \\[1,2,3,4\\]를 넣으면, y값으로 해석하고 자동으로 x값을 \\[0,1,2,3\\]으로 설정!\n\n### X-Y 데이터 시각화\n\n::: {#866f0f05 .cell execution_count=2}\n``` {.python .cell-code}\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=566 height=411}\n:::\n:::\n\n\n#### Problem 1. y = x\\^3 그래프를 그리고 싶다. x축 -10.10까지 범위를 생각하고, y축은 해당하는 값을 발생시켜라!\n\n::: {#1c8a74d1 .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nx = np.arange(-10, 11, 0.5)\ny = x**3\nplt.plot(x, y, 'ro')  # ro = red circle; r^ = red rectangle; \nplt.axis([0, 6, 0, 20]) # 축범위 (0,6) - x축 범위; (0,20) -y축 범위\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=602 height=434}\n:::\n:::\n\n\n-   plot()은 선스타일 및 마커 지정 ('ro' -\\> red circle)\n\n### 여러개의 그래프 그리기\n\n::: {#0ee5173f .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nt = np.arange(0., 5., 0.2)  # 0~5 사이 0.2 간격격\nplt.plot(t, t, 'r--',  # 빨간색 점선\n         t, t**2, 'bs',  # 파란색 정사각형 마커\n         t, t**3, 'g^')  # 초록색 삼각형 마커\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=575 height=411}\n:::\n:::\n\n\n#### Problem 2. 펭귄 데이터 불러와 부리길이 및 깊이 (x,y) 순서쌍 그래프\n\n::: {#496dceeb .cell execution_count=5}\n``` {.python .cell-code}\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\n\nx = penguins['bill_length_mm']\ny = penguins['bill_depth_mm']\nplt.plot(x,y,'ro')\nplt.xlabel('bill_legnth')\nplt.ylabel('bill_depth')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=585 height=429}\n:::\n:::\n\n\n### scatter() - 데이터 딕셔너리\n\n::: {#379b87ce .cell execution_count=6}\n``` {.python .cell-code}\nmydata = {'x': np.arange(50),\n          'y': np.random.randn(50) * 10}\nplt.scatter('x', 'y', data=mydata)  \nplt.xlabel('X Values')\nplt.ylabel('Y Values')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=596 height=429}\n:::\n:::\n\n\n### scatter() - 데이터프레임\n\n::: {#a58ff393 .cell execution_count=7}\n``` {.python .cell-code}\nimport pandas as pd\ndata = {'my_x': np.arange(50),\n          'my_y': np.random.randn(50) * 10}\nmydata = pd.DataFrame(data)\nmydata.head()\nplt.scatter('my_x', 'my_y', data=mydata)  \nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=577 height=411}\n:::\n:::\n\n\n### 범주형 데이터 시각화\n\n::: {#1085453d .cell execution_count=8}\n``` {.python .cell-code}\n# 서브 플랏\nnames = ['A', 'B', 'C']\nvalues = [1, 10, 100]\nplt.figure(figsize=(9, 3))\nplt.subplot(132)\nplt.bar(names, values)  # 막대 그래프\nplt.subplot(231)\nplt.scatter(names, values)  # 산점도\nplt.subplot(233)\nplt.plot(names, values)  # 선 그래프\nplt.suptitle('Categorical Plotting')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=723 height=292}\n:::\n:::\n\n\n### 여러개의 서브플롯 만들기\n\n::: {#b49dd1bd .cell execution_count=9}\n``` {.python .cell-code}\ndef f(t):\n return np.exp(-t) * np.cos(2*np.pi*t)\n\n t = np.arange(0., 5., 0.1)\n t2 = np.arange(0., 5., 0.02)\n plt.figure()\n plt.subplot(211)\n plt.plot(t, f(t), 'bo', # 파란색 동그라미\n          t2, f(t2), 'k')   # 검은선\n plt.subplot(212)\n plt.plot(t2, np.cos(2*np.pi*t2), 'r--')\n plt.show()\n```\n:::\n\n\n### 텍스트 추가 및 주석 처리\n\ntext(x,y,'내용') 사용시 특정 위치에 텍스트 추가\n\n::: {#512881e4 .cell execution_count=10}\n``` {.python .cell-code}\nplt.plot([1, 2, 3, 4], [10, 20, 30, 40])\nplt.text(2, 25, 'LS Bigdata School', fontsize=15)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=566 height=411}\n:::\n:::\n\n\n### 제목, X축, Y축, 범례 지정\n\n-   plt.title('Example Plot') -\\> 그래프 제목 지정\n\n-   plt.xlabel('X Axis'), plt.ylabel('Y Axis') -\\> x,y축 텍스트 추가\n\n-   plt.legend(loc = 'upper left') -\\> 범례 표시 및 위치 지정\n\n::: {#423f2116 .cell execution_count=11}\n``` {.python .cell-code}\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16], label=\"test\")\nplt.title(\"Example Plot\")  # 그래프 제목 추가\nplt.xlabel(\"X Axis\")  # x축 라벨 추가\nplt.ylabel(\"Y Axis\")  # y축 라벨 추가\nplt.legend(loc=\"lower right\")  # 범례 추가 (위치)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){width=585 height=449}\n:::\n:::\n\n\n## 데이터 시각화 개요\n\n::: {#7483a784 .cell execution_count=12}\n``` {.python .cell-code}\ndf = pd.read_csv('c:\\\\Users\\\\USER\\\\Documents\\\\lsbigdata-gen4\\\\data\\\\Obesity2.csv')\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1262 entries, 0 to 1261\nData columns (total 6 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   Gender      1262 non-null   object \n 1   Age         1262 non-null   int64  \n 2   Height      1262 non-null   float64\n 3   Weight      1262 non-null   int64  \n 4   NObeyesdad  1262 non-null   object \n 5   SMOKE       1262 non-null   object \ndtypes: float64(1), int64(2), object(3)\nmemory usage: 59.3+ KB\n```\n:::\n:::\n\n\n### 히스토그램\n\n-   연속형 데이터 분포를 나타내는 그래프\n\n-   데이터를 특정 구간으로 나누고 빈도(bin)수를 막대의 높이로 표현\n\n-   데이터의 분포 형태 확인 및 이상치 탐색\n\n::: {#ab4d739d .cell execution_count=13}\n``` {.python .cell-code}\nplt.hist(df['Age'],\n          bins=20,\n          alpha=0.1, # 막대의 투명도\n          edgecolor='black')\nplt.xlabel(\"Age\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Age 변수 이상치 판단 후 삭제\ndf = df.loc[~(df['Age'] >= 100), :]\ndf\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=593 height=429}\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Height</th>\n      <th>Weight</th>\n      <th>NObeyesdad</th>\n      <th>SMOKE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>male</td>\n      <td>27</td>\n      <td>1.800000</td>\n      <td>87</td>\n      <td>overweight_level_i</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>male</td>\n      <td>26</td>\n      <td>1.850000</td>\n      <td>105</td>\n      <td>obesity_type_i</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>male</td>\n      <td>41</td>\n      <td>1.800000</td>\n      <td>99</td>\n      <td>obesity_type_i</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>female</td>\n      <td>29</td>\n      <td>1.530000</td>\n      <td>78</td>\n      <td>obesity_type_i</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>female</td>\n      <td>23</td>\n      <td>1.650000</td>\n      <td>70</td>\n      <td>overweight_level_i</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1257</th>\n      <td>female</td>\n      <td>21</td>\n      <td>1.710730</td>\n      <td>131</td>\n      <td>obesity_type_iii</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1258</th>\n      <td>female</td>\n      <td>22</td>\n      <td>1.748584</td>\n      <td>134</td>\n      <td>obesity_type_iii</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1259</th>\n      <td>female</td>\n      <td>23</td>\n      <td>1.752206</td>\n      <td>134</td>\n      <td>obesity_type_iii</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1260</th>\n      <td>female</td>\n      <td>24</td>\n      <td>1.739450</td>\n      <td>133</td>\n      <td>obesity_type_iii</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1261</th>\n      <td>female</td>\n      <td>24</td>\n      <td>1.738836</td>\n      <td>133</td>\n      <td>obesity_type_iii</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n<p>1257 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n#### Scott's Rule (상자개수 구하기)\n\n::: {#891a6e09 .cell execution_count=14}\n``` {.python .cell-code}\nn = df['Age'].size\nh = 3.5 * np.std(df['Age']) / n**(1/3)\nint((max(df['Age']) - min(df['Age'])) / h)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n20\n```\n:::\n:::\n\n\n### 밀도곡선(Density Plot)\n\n-   히스토그램과 유사하지만 KDE를 사용하여 부드러운 형태로 변환\n\n-   확률 밀도 함수의 추정값을 시각적으로 확인 가능\n\n::: {#54f8ec90 .cell execution_count=15}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.kdeplot(df['Age'], shade=True)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Density\")\nplt.show()\n\n# 밴드위스 조정\nsns.kdeplot(df['Age'], bw_method=0.01, shade =True)\nsns.kdeplot(df['Age'], bw_method=0.1, shade =True)\nsns.kdeplot(df['Age'], bw_method=0.5, shade =True)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_16496\\1935096718.py:3: FutureWarning:\n\n\n\n`shade` is now deprecated in favor of `fill`; setting `fill=True`.\nThis will become an error in seaborn v0.14.0; please update your code.\n\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-2.png){width=597 height=429}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_16496\\1935096718.py:9: FutureWarning:\n\n\n\n`shade` is now deprecated in favor of `fill`; setting `fill=True`.\nThis will become an error in seaborn v0.14.0; please update your code.\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_16496\\1935096718.py:10: FutureWarning:\n\n\n\n`shade` is now deprecated in favor of `fill`; setting `fill=True`.\nThis will become an error in seaborn v0.14.0; please update your code.\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_16496\\1935096718.py:11: FutureWarning:\n\n\n\n`shade` is now deprecated in favor of `fill`; setting `fill=True`.\nThis will become an error in seaborn v0.14.0; please update your code.\n\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-4.png){width=589 height=431}\n:::\n:::\n\n\n### 막대그래프(Bar Chart)\n\n-   범주형 데이터의 빈도나 특정 값의 크기를 비교하는 그래프\n\n-   그룹별 비교 및 카테고리별 값의 차이 확인\n\n::: {#2a06932a .cell execution_count=16}\n``` {.python .cell-code}\ncategory_counts = df['NObeyesdad'].value_counts()\nplt.figure(figsize=(6,5))\nsns.barplot(x = category_counts.index,\n            y = category_counts.values,\n            palette = 'magma') # palette: magama/rocket/....\nplt.xlabel(\"Obesity Level\")\nplt.ylabel(\"Count\")\nplt.ylim(250,350)\nplt.title(\"Bar Chart of Obesity Levels\")\nplt.xticks(rotation=45)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_16496\\3353004455.py:3: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-2.png){width=519 height=533}\n:::\n:::\n\n\n### Box Plot(상자 그림)\n\n-   데이터의 분포와 이상치를 확인하는 그래프\n\n-   최소값, Q1,Q2(중앙값),Q3, 최대값, 이상치(outlier) 표시\n\n-   이상치 판단 기준\n\n    1.  IQR = Q3 - Q1\n\n    2.  데이터 중 Q1과 Q3 1.5\\*IQR 범위 밖의 데이터는 '이상치 분류'\n\n#### Problem3. 다음의 Q1,Q2,Q3의 값 및\n\n::: {#de2e4ae5 .cell execution_count=17}\n``` {.python .cell-code}\nnp.random.seed(25317)\nx = np.random.randint(1, 21, size = 15)\nnp.sort(x)\n#  1,  3,  3,  5,  5,  6,  6,  8, 11, 13, 13, 15, 18, 18, 20\n\nq2 = 8\n\nnp.sort(x[x<q2])\nq1 = 5\n\nnp.sort(x[x>q2])\nq3 = 15\n\nq1,q2,q3\n\nIQR = q3 - q1\n\n# 이상치 계산 \n# 상위 이상치\n1.5*IQR\n\n# 하위 이상치\n-1.5*IQR\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n-15.0\n```\n:::\n:::\n\n\n::: {#689899c0 .cell execution_count=18}\n``` {.python .cell-code}\nplt.figure(figsize=(6,5))\nsns.boxplot(x=df['NObeyesdad'], \n            y=df['Weight'], \n            palette=\"Pastel1\")\nplt.xlabel(\"Obesity Level\")\nplt.ylabel(\"Weight\")\nplt.title(\"Box Plot of Weight by Obesity Level\")\nplt.xticks(rotation=45)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_16496\\2940293794.py:2: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-2.png){width=519 height=533}\n:::\n:::\n\n\n### 산점도(Scatter Plot)\n\n::: {#908fb5ae .cell execution_count=19}\n``` {.python .cell-code}\n#  비만 종류별(NObeyesdad) 데이터 포인트 색깔을 변경해보세요!\nsns.scatterplot(data=df, x=\"Height\", y=\"Weight\", \n                hue=\"NObeyesdad\", # 종류별로 다른 색깔\n                style = 'NObeyesdad',  # 종류별로 다른 모양\n                )\nplt.title(\"Scatter Plot of Height vs Weight\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){width=598 height=449}\n:::\n:::\n\n\n### 히트맵(HeatMap)\n\n-   데이터 행렬의 색상을 색깔로 표현한 그래프\n\n-   상관관계 분석 그래프\n\n::: {#57f257d7 .cell execution_count=20}\n``` {.python .cell-code}\n# 상관행렬 계산\ncorr_matrix = df[['Age', 'Height', 'Weight']].corr()\n# 히트맵 그리기\nplt.figure(figsize=(6,5))\nsns.heatmap(corr_matrix,\n            annot=True, # 그래프 글씨 유무\n            cmap=\"coolwarm\",\n            fmt = \".2f\", linewidths=0.5)\nplt.title(\"Heatmap of Feature Correlations\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=470 height=431}\n:::\n:::\n\n\n### 시계열라인 그래프(Time Series Line Graph)\n\n-   시간에 따른 값의 변화를 나타낸 그래프\n\n-   X축이 시간, Y축이 해당하는 시간의 값\n\n-   추세 분석이 목적\n\n::: {#f43e420c .cell execution_count=21}\n``` {.python .cell-code}\ndates = pd.date_range(start='2023-01-01', periods=30, freq='D')\nvalues = np.cumsum(np.random.randn(30)) + 5\n\ndf_timeseries = pd.DataFrame({\"Date\": dates, \"Value\": values})\n\n# 시계열 그래프 생성\nplt.figure(figsize=(8, 5))\nplt.plot(df_timeseries['Date'], df_timeseries['Value'], marker='o', linestyle='-')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Value\")\nplt.title(\"Time Series Line Graph\")\nplt.xticks(rotation=45)\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-22-output-1.png){width=659 height=500}\n:::\n:::\n\n\n### 모자이크 그래프(Mosaic Plot)\n\n-   두 개이상의 범주형 변수 간의 관계를 시각화 하는 그래프\n\n-   범주형 데이터 간의 관계 분석이 목적\n\n::: {#ba95f012 .cell execution_count=22}\n``` {.python .cell-code}\nfrom statsmodels.graphics.mosaicplot import mosaic\nimport matplotlib.pyplot as plt\n\n # 모자이크 그래프 그리기\nplt.figure(figsize=(8,5))\nmosaic(df, ['Gender', 'NObeyesdad'], \n       title= \"Mosaic Plot of Gender vs Obesity level\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 768x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-23-output-2.png){width=673 height=431}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}