{
  "hash": "784455fc5bd06435d151529847fa59b0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pandas 개념정리\"\ndate : \"2025-03-10\"\nauthor: \"Jiwon Shin\"\ncategories: [news, code, analysis]\nimage: \"Pandas-logo.webp\"\n---\n\n\n## 판다스 활용하기\n\n### 데이터 프레임(Data Frame)이란?\n각 열에 있는 데이터 타입이 달라도 괜찮다!  \n\n::: {#27b98a4a .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# 데이터 프레임 생성\ndf = pd.DataFrame({\n    'col-str': ['one', 'two', 'three', 'four','five'],\n    'col-num': [6, 7, 8, 9, 10]\n})\ndf\nprint(df)\n\nprint(df['col-str'].dtype)  # object\nprint(df['col-num'].dtype)  # integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  col-str  col-num\n0     one        6\n1     two        7\n2   three        8\n3    four        9\n4    five       10\nobject\nint64\n```\n:::\n:::\n\n\n### 시리즈(series)란 무엇일까?\n1차원 구조를 지님.  \n그렇기 때문에 하나의 데이터 타입을 가지고 있다!\n\n::: {#5b468b28 .cell execution_count=2}\n``` {.python .cell-code}\ndata = [10, 20, 30]\ndf_s = pd.Series(data, index=['one', 'two', 'three'])\nprint(df_s)\ndf_s.shape\n\n# 시리즈는 columns을 통해 열 이름을 확인할 수 없음\n# df_s.columns \n\n# name을 통해 시리즈 이름을 확인할 수 있음\ndf_s.name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\none      10\ntwo      20\nthree    30\ndtype: int64\n```\n:::\n:::\n\n\n#### 데이터 프레임 채우면서 만들기\n\n::: {#48888adf .cell execution_count=3}\n``` {.python .cell-code}\nmy_df = pd.DataFrame({\n    'name': ['issac', 'bomi'],\n    'birthmonth': [5, 4]\n})\nprint(my_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name  birthmonth\n0  issac           5\n1   bomi           4\n```\n:::\n:::\n\n\n::: {#64c1c3ea .cell execution_count=4}\n``` {.python .cell-code}\ndf = pd.DataFrame({\n    'studnet_id': [1,2,3],\n    'gender': ['F', 'M', 'F'],\n    'midterm': [38,42,53]\n}, index = [\"first\", \"second\", \"third\"])\nprint(df)\n\ndf['gender'] # gender 행 전체를 가져옴.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        studnet_id gender  midterm\nfirst            1      F       38\nsecond           2      M       42\nthird            3      F       53\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nfirst     F\nsecond    M\nthird     F\nName: gender, dtype: object\n```\n:::\n:::\n\n\n::: {#d632271b .cell execution_count=5}\n``` {.python .cell-code}\nmy_s = pd.Series(['F', 'M', 'F'],\n                  name = \"gender\", index = [\"first\", \"second\", \"third\"])\nmy_s\npd.DataFrame(my_s)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>first</th>\n      <td>F</td>\n    </tr>\n    <tr>\n      <th>second</th>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>third</th>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### csv 파일로 읽어오기\n\n::: {#4a2cc6a5 .cell execution_count=6}\n``` {.python .cell-code}\nurl = \"https://bit.ly/examscore-csv\"\nmydata = pd.read_csv(url)\nmydata.head(10) # 위에서 10개의 열만 가져옴\n\nmydata['gender'].head()\nmydata[['gender','student_id']].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>student_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>F</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>F</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>M</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>M</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#df422504 .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np \n# mydata\n# mydata[mydata['gender'] == \"F\", :]  # 에러발생\nmydata.loc[mydata['gender'] == \"F\", :]  #작동\nmydata[mydata['gender'] == \"F\"]   #작동\ncheck_f = np.array(mydata['gender'] == \"F\") # 작동\nmydata.iloc[check_f, :]\n\nmydata[mydata['midterm'] <= 15]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>gender</th>\n      <th>midterm</th>\n      <th>final</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>M</td>\n      <td>9</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>22</td>\n      <td>M</td>\n      <td>15</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#8a398cbc .cell execution_count=8}\n``` {.python .cell-code}\n# 중간고사 점수 45 - 60점 사이 학생은 몇명인가요?\ncheck_score = (mydata['midterm'] >= 45) & (mydata['midterm'] <= 60)\nmydata[check_score].shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n10\n```\n:::\n:::\n\n\n### 데이터 프레임 인덱싱\n데이터 프레임 내의 특정 데이터를 효율적으로 필터링 및 조작할 수 있다.  \n\n#### iloc[]를 이용한 필터링\n\n::: {#f283d380 .cell execution_count=9}\n``` {.python .cell-code}\n# 대괄호 안에 숫자를 써서 인덱스 불가\n# .iloc 함수를 사용하면 가능!\n# mydata[1:4,0]  불가능!\nmydata.iloc[0, 0] # 1행 1열에 있는 숫자 -> 1!\nmydata.iloc[1:4,1:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>midterm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>F</td>\n      <td>53</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>M</td>\n      <td>48</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#4ccdcb1e .cell execution_count=10}\n``` {.python .cell-code}\n# .iloc 함수는 인덱스가 문자여도 잘 작동\nmydata2 = mydata.iloc[:4,:3]\nmydata2.index\nmydata2.index = [\"first\", \"second\", \"third\", \"fourth\"]\nmydata2\nmydata2.iloc[0:2,0]\n\n# .iloc 함수는 : 도 잘 작동함!\nmydata2.iloc[:,0]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nfirst     1\nsecond    2\nthird     3\nfourth    4\nName: student_id, dtype: int64\n```\n:::\n:::\n\n\n리스트 형태로 필터링할 경우 DataFrame으로 변경됨\n\n::: {#46ab74c6 .cell execution_count=11}\n``` {.python .cell-code}\n# .iloc 함수는 결과값의 타입이 변동함.\nmydata2.iloc[0, 1] # 결과 : 값 하나\nmydata2.iloc[0:2, 1] # 결과 : 시리즈\nmydata2.iloc[2, 0:2] # 결과 : 시리즈\nmydata2.iloc[0:3, 0:2]  #결과 :데이터프레임\nresult1 = mydata2.iloc[:,0] # 결과 : 시리즈\nresult2 = mydata2.iloc[:, [0]] # 결과 : 데이터프레임\nresult1[1]                           \nresult2.iloc[1,0]\n\n# DataFrame을 Series로 변경하기 위해서 squeeze()활용!\nmydata2.iloc[:, [0]].squeeze() # 결과: 시리즈\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18300\\3031718094.py:8: FutureWarning:\n\nSeries.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nfirst     1\nsecond    2\nthird     3\nfourth    4\nName: student_id, dtype: int64\n```\n:::\n:::\n\n\n#### loc()를 이용한 필터링\n\n::: {#987f04d1 .cell execution_count=12}\n``` {.python .cell-code}\n# 라벨을 이용한 인덱싱 loc[] - p20\nmydata.loc[mydata['midterm'] <= 15]\nmydata.loc[mydata['midterm'] <= 15, \"student_id\"]\nmydata.loc[mydata['midterm'] <= 15, [\"student_id\"]]\nmydata.loc[mydata['midterm'] <= 15, [\"student_id\", \"gender\"]]\n\nmydata['midterm'].iloc[0] # 0번째 값이 무엇이 들어있는지 확인\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n38\n```\n:::\n:::\n\n\n#### isin[] 활용하기\n특정 값이 데이터 프레임 내에 존재하는지 확인하고,  \n조건을 만족하는 행을 필터링하는데 사용\n\n::: {#2ec8c3f9 .cell execution_count=13}\n``` {.python .cell-code}\n# 28,38,52 중 값이 있는지 TRUE,FALSE 값을 반환\nmydata['midterm'].isin([28, 38, 52]) \n# ~를 붙이면 특정값을 제외함(앞줄이랑 반대)\n~mydata['midterm'].isin([28, 38, 52]) \nmydata.loc[mydata['midterm'].isin([28, 38, 52])]\nmydata.loc[~mydata['midterm'].isin([28, 38, 52])]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>gender</th>\n      <th>midterm</th>\n      <th>final</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>M</td>\n      <td>42</td>\n      <td>67</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>F</td>\n      <td>53</td>\n      <td>56</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>M</td>\n      <td>48</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>M</td>\n      <td>46</td>\n      <td>39</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>M</td>\n      <td>51</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>M</td>\n      <td>48</td>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>M</td>\n      <td>43</td>\n      <td>58</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>F</td>\n      <td>50</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>F</td>\n      <td>29</td>\n      <td>44</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>M</td>\n      <td>27</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>14</td>\n      <td>M</td>\n      <td>36</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>M</td>\n      <td>29</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>16</td>\n      <td>F</td>\n      <td>34</td>\n      <td>39</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>F</td>\n      <td>35</td>\n      <td>57</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>F</td>\n      <td>46</td>\n      <td>86</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>M</td>\n      <td>39</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>M</td>\n      <td>9</td>\n      <td>33</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>21</td>\n      <td>M</td>\n      <td>76</td>\n      <td>79</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>22</td>\n      <td>M</td>\n      <td>15</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>23</td>\n      <td>M</td>\n      <td>63</td>\n      <td>77</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>25</td>\n      <td>M</td>\n      <td>49</td>\n      <td>58</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>26</td>\n      <td>M</td>\n      <td>42</td>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>27</td>\n      <td>F</td>\n      <td>24</td>\n      <td>53</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>29</td>\n      <td>F</td>\n      <td>65</td>\n      <td>78</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 완전한 표본 체크하기\n\n::: {#08972823 .cell execution_count=14}\n``` {.python .cell-code}\n# 데이터에 빈칸이 뜷려있는 경우\nmydata.iloc[3, 2] = np.nan\nmydata.iloc[10, 3] = np.nan\nmydata.iloc[13, 1] = np.nan\n\nmydata[\"gender\"].isna()\n\nmydata.loc[mydata[\"gender\"].isna()]\nmydata.loc[~mydata[\"gender\"].isna()]\n\nmydata.dropna()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>student_id</th>\n      <th>gender</th>\n      <th>midterm</th>\n      <th>final</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>F</td>\n      <td>38.0</td>\n      <td>46.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>M</td>\n      <td>42.0</td>\n      <td>67.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>F</td>\n      <td>53.0</td>\n      <td>56.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>M</td>\n      <td>46.0</td>\n      <td>39.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>M</td>\n      <td>51.0</td>\n      <td>74.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>M</td>\n      <td>48.0</td>\n      <td>36.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>M</td>\n      <td>43.0</td>\n      <td>58.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>M</td>\n      <td>28.0</td>\n      <td>25.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>M</td>\n      <td>38.0</td>\n      <td>59.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>F</td>\n      <td>29.0</td>\n      <td>44.0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>M</td>\n      <td>27.0</td>\n      <td>25.0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>M</td>\n      <td>29.0</td>\n      <td>47.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>16</td>\n      <td>F</td>\n      <td>34.0</td>\n      <td>39.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>F</td>\n      <td>35.0</td>\n      <td>57.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>F</td>\n      <td>46.0</td>\n      <td>86.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>M</td>\n      <td>39.0</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>M</td>\n      <td>9.0</td>\n      <td>33.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>21</td>\n      <td>M</td>\n      <td>76.0</td>\n      <td>79.0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>22</td>\n      <td>M</td>\n      <td>15.0</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>23</td>\n      <td>M</td>\n      <td>63.0</td>\n      <td>77.0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>24</td>\n      <td>M</td>\n      <td>28.0</td>\n      <td>55.0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>25</td>\n      <td>M</td>\n      <td>49.0</td>\n      <td>58.0</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>26</td>\n      <td>M</td>\n      <td>42.0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>27</td>\n      <td>F</td>\n      <td>24.0</td>\n      <td>53.0</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>28</td>\n      <td>F</td>\n      <td>52.0</td>\n      <td>66.0</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>29</td>\n      <td>F</td>\n      <td>65.0</td>\n      <td>78.0</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>30</td>\n      <td>M</td>\n      <td>52.0</td>\n      <td>65.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#bba9ac85 .cell execution_count=15}\n``` {.python .cell-code}\n# Q. mydata에서 중간고사와 기말고사가 \n# 다 채워진 행들을 가져오세요.\n\ncon1 = ~mydata[\"midterm\"].isna() # 중간고사 채워진 애들\ncon2 = ~mydata[\"final\"].isna() # 기말고사 채워진 애들\n```\n:::\n\n\n### 구성원소 추가/삭제/변경\n\n::: {#e646f967 .cell execution_count=16}\n``` {.python .cell-code}\n# mydata에 final 열을 추가가\nmydata['total'] = mydata['midterm'] + mydata['final']\nmydata\n\nmydata[\"midterm\"].isna()\n# midterm 열에 빈칸을 50으로 채워줌\nmydata[\"midterm\"].loc[mydata[\"midterm\"].isna()] = 50 \n\nmydata[\"midterm\"].isna().sum() # 빈칸이 몇개 있는지 체크!\nmydata[\"final\"].isna().sum() # 빈칸이 몇개 있는지 체크!\n# final 열에 빈칸을 30으로 채워줌. \nmydata[\"final\"].loc[mydata[\"final\"].isna()] = 30\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18300\\1717743041.py:7: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18300\\1717743041.py:7: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18300\\1717743041.py:12: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_18300\\1717743041.py:12: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n```\n:::\n:::\n\n\n#### 변경 및 추가 \n\n::: {#c142d694 .cell execution_count=17}\n``` {.python .cell-code}\n(mydata['total'] / 2).rename('average')\nmydata = pd.concat([mydata, (mydata['total'] /2).rename('average')], axis = 1)\n\n# 열 삭제\ndel mydata[\"gender\"]\n\nmydata.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nIndex(['student_id', 'midterm', 'final', 'total', 'average'], dtype='object')\n```\n:::\n:::\n\n\n#### pd.concat() 함수\n프레임이나 시리즈를 연결하는데 사용\n\n::: {#1f990de5 .cell execution_count=18}\n``` {.python .cell-code}\n#  에제1 : 두개 데이터 프레임 연결하기(axis=0-행방향)\nimport pandas as pd\ndf1 = pd.DataFrame({\n'A': ['A0', 'A1', 'A2'],\n'B': ['B0', 'B1', 'B2']\n})\ndf2 = pd.DataFrame({\n'A': ['A3', 'A4', 'A5'],\n'B': ['B3', 'B4', 'B5']\n})\nresult = pd.concat([df1, df2])\n```\n:::\n\n\n::: {#7aedcb58 .cell execution_count=19}\n``` {.python .cell-code}\n#  에제2 : 열방향으로 연결\ndf3 = pd.DataFrame({\n'C': ['C0', 'C1', 'C2'],\n'D': ['D0', 'D1', 'D2']\n})\n\n# axis = 1 옵션으로 인해 열 방향으로 합쳐졌다.\nresult = pd.concat([df1, df3], axis=1)\n```\n:::\n\n\n::: {#bb12b56b .cell execution_count=20}\n``` {.python .cell-code}\n# 에제3 : ignore_index 옵션 사용\n\n# ignore_index = True 옵션으로 인해 행 번호 중복 출력 x\npd.concat([df1, df2], ignore_index = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A0</td>\n      <td>B0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A1</td>\n      <td>B1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A2</td>\n      <td>B2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A3</td>\n      <td>B3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A4</td>\n      <td>B4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>A5</td>\n      <td>B5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#441ebb15 .cell execution_count=21}\n``` {.python .cell-code}\n# 예제4: join 옵션 사용\ndf4 = pd.DataFrame({\n'A': ['A2', 'A3', 'A4'],\n'B': ['B2', 'B3', 'B4'],\n'C': ['C2', 'C3', 'C4']\n})\n\n# join = 'inner' 는 공통 열만 포함하는 결합\nresult = pd.concat([df1, df4], join='inner')\n\n# join = 'outer'는 모든 열을 포함하는 외부 결합;\n# 하나의 데이터 프레임에만 존재하는 열은 NaN\nresult = pd.concat([df1, df4], join='outer')\n```\n:::\n\n\n::: {#9b5470c7 .cell execution_count=22}\n``` {.python .cell-code}\n# 예제 5: keys 옵션 사용\n\n# keys 옵션 사용시 연결된 데이터 프레임의 원본 출처를 \n# 식별하는 멀티인덱스 생성\ndf_wkey = pd.concat([df1, df2], keys=['key1', 'key2'])\ndf_wkey.loc['key2']\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A3</td>\n      <td>B3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A4</td>\n      <td>B4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A5</td>\n      <td>B5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 판다스 데이터 프레임에서 이용가능한 메서드\nhead() - 데이터 프레임의 처음 몇개 행을 반환  \n\n::: {#9374fec1 .cell execution_count=23}\n``` {.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\ndf = load_penguins()\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\ntail() - 데이터 프레임의 마지막 몇개의 행을 반환  \n\n::: {#00e93076 .cell execution_count=24}\n``` {.python .cell-code}\ndf.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>339</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>55.8</td>\n      <td>19.8</td>\n      <td>207.0</td>\n      <td>4000.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>340</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>43.5</td>\n      <td>18.1</td>\n      <td>202.0</td>\n      <td>3400.0</td>\n      <td>female</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>341</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>49.6</td>\n      <td>18.2</td>\n      <td>193.0</td>\n      <td>3775.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>342</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.8</td>\n      <td>19.0</td>\n      <td>210.0</td>\n      <td>4100.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>343</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.2</td>\n      <td>18.7</td>\n      <td>198.0</td>\n      <td>3775.0</td>\n      <td>female</td>\n      <td>2009</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\ndescribe() - 데이터 프레임의 요약 통계를 반환\n\n::: {#61a00f05 .cell execution_count=25}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>342.000000</td>\n      <td>342.000000</td>\n      <td>342.000000</td>\n      <td>342.000000</td>\n      <td>344.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>43.921930</td>\n      <td>17.151170</td>\n      <td>200.915205</td>\n      <td>4201.754386</td>\n      <td>2008.029070</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>5.459584</td>\n      <td>1.974793</td>\n      <td>14.061714</td>\n      <td>801.954536</td>\n      <td>0.818356</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>32.100000</td>\n      <td>13.100000</td>\n      <td>172.000000</td>\n      <td>2700.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>39.225000</td>\n      <td>15.600000</td>\n      <td>190.000000</td>\n      <td>3550.000000</td>\n      <td>2007.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>44.450000</td>\n      <td>17.300000</td>\n      <td>197.000000</td>\n      <td>4050.000000</td>\n      <td>2008.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>48.500000</td>\n      <td>18.700000</td>\n      <td>213.000000</td>\n      <td>4750.000000</td>\n      <td>2009.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>59.600000</td>\n      <td>21.500000</td>\n      <td>231.000000</td>\n      <td>6300.000000</td>\n      <td>2009.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\ninfo() - 데이터 프레임의 정보(컬럼,타입 등)\n\n::: {#d1ed58c5 .cell execution_count=26}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \n 7   year               344 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 21.6+ KB\n```\n:::\n:::\n\n\nsort_values() - 특정 열을 기준으로 데이터 프레임 정렬\n\n::: {#bd13e521 .cell execution_count=27}\n``` {.python .cell-code}\n# 내림차순 정렬: ascending =False\n# 'bill_length_mm' 열을 기준으로 데이터 프레임 정렬 - 오름차순\nsorted_df = df.sort_values(by='bill_length_mm', ascending=False)\nsorted_df.head()\n\n# 'bill_length_mm'를 내림차순으로, 'bill_depth_mm'를 오름차순으로 정렬\nsorted_df = df.sort_values(\nby=['bill_length_mm', 'bill_depth_mm'],\nascending=[False, True]\n)\nsorted_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>185</th>\n      <td>Gentoo</td>\n      <td>Biscoe</td>\n      <td>59.6</td>\n      <td>17.0</td>\n      <td>230.0</td>\n      <td>6050.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>293</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>58.0</td>\n      <td>17.8</td>\n      <td>181.0</td>\n      <td>3700.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>253</th>\n      <td>Gentoo</td>\n      <td>Biscoe</td>\n      <td>55.9</td>\n      <td>17.0</td>\n      <td>228.0</td>\n      <td>5600.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>339</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>55.8</td>\n      <td>19.8</td>\n      <td>207.0</td>\n      <td>4000.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n    <tr>\n      <th>267</th>\n      <td>Gentoo</td>\n      <td>Biscoe</td>\n      <td>55.1</td>\n      <td>16.0</td>\n      <td>230.0</td>\n      <td>5850.0</td>\n      <td>male</td>\n      <td>2009</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nidmax() & idxmin() - 각 데이터프레임이나 시리즈에서 최대값.최소값을 가지는 첫 인덱스 반환\n\n::: {#d9adb4f9 .cell execution_count=28}\n``` {.python .cell-code}\n# 'bill_length_mm' 열에서 최대값을 가지는 행의 인덱스 반환\nmax_idx = df['bill_length_mm'].idxmax()\nmax_idx\n\n# loc 매서드는 해당 인덱스에 위치한 행의 데이터를 출력\ndf.loc[max_idx]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nspecies              Gentoo\nisland               Biscoe\nbill_length_mm         59.6\nbill_depth_mm          17.0\nflipper_length_mm     230.0\nbody_mass_g          6050.0\nsex                    male\nyear                   2007\nName: 185, dtype: object\n```\n:::\n:::\n\n\n::: {#ccb19494 .cell execution_count=29}\n``` {.python .cell-code}\n# 'bill_length_mm' 열에서 최소값을 가지는 행의 인덱스 반환\nmin_idx = df['bill_length_mm'].idxmin()\nmin_idx\n\n# loc 매서드는 해당 인덱스에 위치한 행의 데이터를 출력\ndf.loc[min_idx]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nspecies              Adelie\nisland                Dream\nbill_length_mm         32.1\nbill_depth_mm          15.5\nflipper_length_mm     188.0\nbody_mass_g          3050.0\nsex                  female\nyear                   2009\nName: 142, dtype: object\n```\n:::\n:::\n\n\ngroupby() - 특정 열을 기준으로 데이터 프레임 그룹화\n\n::: {#3945316e .cell execution_count=30}\n``` {.python .cell-code}\n# 'species' 열을 기준으로 그룹화하여 평균 계산\ngrouped_df = df.groupby('species').mean(numeric_only = True)\ngrouped_df\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n    <tr>\n      <th>species</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adelie</th>\n      <td>38.791391</td>\n      <td>18.346358</td>\n      <td>189.953642</td>\n      <td>3700.662252</td>\n      <td>2008.013158</td>\n    </tr>\n    <tr>\n      <th>Chinstrap</th>\n      <td>48.833824</td>\n      <td>18.420588</td>\n      <td>195.823529</td>\n      <td>3733.088235</td>\n      <td>2007.970588</td>\n    </tr>\n    <tr>\n      <th>Gentoo</th>\n      <td>47.504878</td>\n      <td>14.982114</td>\n      <td>217.186992</td>\n      <td>5076.016260</td>\n      <td>2008.080645</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nmean() - 데이터 프레임의 평균 계산\n\n::: {#dc15029d .cell execution_count=31}\n``` {.python .cell-code}\n# 데이터 프레임의 각 열의 평균 계산\nprint(df.mean(numeric_only = True))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbill_length_mm         43.921930\nbill_depth_mm          17.151170\nflipper_length_mm     200.915205\nbody_mass_g          4201.754386\nyear                 2008.029070\ndtype: float64\n```\n:::\n:::\n\n\n::: {#d28ac1eb .cell execution_count=32}\n``` {.python .cell-code}\n# 'species' 열을 기준으로 그룹화하여 평균 계산\ngrouped_df = df.groupby('species').mean(numeric_only = True)\nprint(grouped_df)\n\ndf.groupby('island').mean(numeric_only=True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g  \\\nspecies                                                                    \nAdelie          38.791391      18.346358         189.953642  3700.662252   \nChinstrap       48.833824      18.420588         195.823529  3733.088235   \nGentoo          47.504878      14.982114         217.186992  5076.016260   \n\n                  year  \nspecies                 \nAdelie     2008.013158  \nChinstrap  2007.970588  \nGentoo     2008.080645  \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>year</th>\n    </tr>\n    <tr>\n      <th>island</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Biscoe</th>\n      <td>45.257485</td>\n      <td>15.874850</td>\n      <td>209.706587</td>\n      <td>4716.017964</td>\n      <td>2008.095238</td>\n    </tr>\n    <tr>\n      <th>Dream</th>\n      <td>44.167742</td>\n      <td>18.344355</td>\n      <td>193.072581</td>\n      <td>3712.903226</td>\n      <td>2007.983871</td>\n    </tr>\n    <tr>\n      <th>Torgersen</th>\n      <td>38.950980</td>\n      <td>18.429412</td>\n      <td>191.196078</td>\n      <td>3706.372549</td>\n      <td>2007.923077</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nsum() - 데이터 프레임의 합계 계산\n\n::: {#792d2d11 .cell execution_count=33}\n``` {.python .cell-code}\n# 데이터 프레임의 각 열의 합계 계산\nprint(df.sum(numeric_only = True))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbill_length_mm         15021.3\nbill_depth_mm           5865.7\nflipper_length_mm      68713.0\nbody_mass_g          1437000.0\nyear                  690762.0\ndtype: float64\n```\n:::\n:::\n\n\n::: {#a3ffa579 .cell execution_count=34}\n``` {.python .cell-code}\n# 최대 부리길이 60인 펭귄은 몇마리?\nsum(df['bill_length_mm'] == 60.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n0\n```\n:::\n:::\n\n\n### 연습문제\n연습1\n\n::: {#2a7f2355 .cell execution_count=35}\n``` {.python .cell-code}\nmidterm= pd.DataFrame({'id' : [23, 10, 5, 1], 'midterm':[40, 30, 50,20]})\nfinal = pd.DataFrame({'id' : [23, 10, 5, 1], 'final':[45, 25, 50, 17]})\n\npd.merge(midterm, final, on = 'id', how = 'outer')\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>midterm</th>\n      <th>final</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>20</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5</td>\n      <td>50</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10</td>\n      <td>30</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23</td>\n      <td>40</td>\n      <td>45</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n연습2\n\n* 1 성별, 섬별 부리길이 평균계산\n\n::: {#457f9ea7 .cell execution_count=36}\n``` {.python .cell-code}\nbill_length = df.groupby([\"sex\",\"island\"], as_index = False)['bill_length_mm'].mean(numeric_only=True)\n```\n:::\n\n\n* 2. 성별, 섬별 부리깊이 평균계산\n\n::: {#fabdf682 .cell execution_count=37}\n``` {.python .cell-code}\nbill_depth = df.groupby(['sex','island'], as_index = False)['bill_depth_mm'].mean(numeric_only=True)\n```\n:::\n\n\n* 3. 1.2 단계 데이터 프레임 병합해서 성별, 섬별, 부리길이,깊이 데이터 프레임 만들기\n\n::: {#878a7445 .cell execution_count=38}\n``` {.python .cell-code}\nmerged_df = pd.merge(bill_length, bill_depth, on=[\"sex\",\"island\"],how ='outer')\n# 오류 발생??\n# loc는 행 인덱스를 기준으로 접근하는 방법\n# merged_df.loc[\"female\"]\nmerged_df[merged_df['sex'] == 'female']\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>female</td>\n      <td>Biscoe</td>\n      <td>43.307500</td>\n      <td>15.191250</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>Dream</td>\n      <td>42.296721</td>\n      <td>17.601639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>female</td>\n      <td>Torgersen</td>\n      <td>37.554167</td>\n      <td>17.550000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nmerge() - 두 데이터 프레임 병합\n\n::: {#e7e35e2f .cell execution_count=39}\n``` {.python .cell-code}\n# 예제 데이터 프레임 생성\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'value': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'value': [4, 5, 6]})\n\n# 두 데이터 프레임 병합\n# on = 'key' 병합할때 기준이 되는 열 지정\n# how = 'inner'병합 방법지정; inner(교집합), outer(합집합)\nmerged_df = pd.merge(df1, df2, on='key', how='inner') \nprint(merged_df)\n\n# 두 데이터 프레임을 outer join으로 병합\nmerged_df_outer = pd.merge(df1, df2, on='key', how='outer')\nprint(merged_df_outer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  key  value_x  value_y\n0   A        1        4\n1   B        2        5\n  key  value_x  value_y\n0   A      1.0      4.0\n1   B      2.0      5.0\n2   C      3.0      NaN\n3   D      NaN      6.0\n```\n:::\n:::\n\n\n### 데이터 재구조화 - p69\n#### melt() 메서드\n데이터를 넓은 형식에서 긴형식으로 변환\n\n::: {#d7adb9b2 .cell execution_count=40}\n``` {.python .cell-code}\ndata = {\n    'Date': ['2024-07-01', '2024-07-02', '2024-07-03'],\n    'Temperature': [10, 20, 25],\n    'Humidity': [60, 65, 70]\n}\n\ndf = pd.DataFrame(data)\n\ndf_melted = pd.melt(df,\n    id_vars=['Date'],\n    value_vars=['Temperature', 'Humidity'],\n    var_name='Variable',\n    value_name='Value'\n    )\n\ndf_melted\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Variable</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2024-07-01</td>\n      <td>Temperature</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2024-07-02</td>\n      <td>Temperature</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2024-07-03</td>\n      <td>Temperature</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2024-07-01</td>\n      <td>Humidity</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2024-07-02</td>\n      <td>Humidity</td>\n      <td>65</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2024-07-03</td>\n      <td>Humidity</td>\n      <td>70</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cd6ceedd .cell execution_count=41}\n``` {.python .cell-code}\n# 또 다른 예제\ndata = {\n    'Country': ['Afghanistan', 'Brazil', 'China'],\n    '2024년': [745, 37737, 212258],\n    '2025년': [2666, 80488, 213766]\n}\n\ndf_wide = pd.DataFrame(data)\ndf_wide\n\ndf_long = pd.melt(df_wide,\n    id_vars = ['Country'],\n    value_vars = ['2024년','2025년'],\n    var_name= 'Year',\n    value_name= 'cases'\n    )\n```\n:::\n\n\n#### pivot() 메서드 \n데이터를 긴형식에서 넓은 형식으로 변환\n\n::: {#bd07d170 .cell execution_count=42}\n``` {.python .cell-code}\ndf_pivoted = df_melted.pivot(\n    index='Date',\n    columns='Variable',\n    values='Value').reset_index()\ndf_pivoted\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Variable</th>\n      <th>Date</th>\n      <th>Humidity</th>\n      <th>Temperature</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2024-07-01</td>\n      <td>60</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2024-07-02</td>\n      <td>65</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2024-07-03</td>\n      <td>70</td>\n      <td>25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#80718769 .cell execution_count=43}\n``` {.python .cell-code}\n# 연습데이터\ndata = {\n    'Country': ['Afghanistan', 'Brazil', 'China'],\n    '2024년': [745, 37737, 212258],\n    '2025년': [2666, 80488, 213766]\n}\n\ndf_wide = pd.DataFrame(data)\ndf_wide\n\ndf_long = pd.melt(df_wide,\n    id_vars = ['Country'],\n    value_vars = ['2024년','2025년'],\n    var_name= 'Year',\n    value_name= 'cases'\n    )\n\n# pivot 사용해서 wide 형식으로 바꾸려면?\ndf_wide2 = df_long.pivot(\n    index='Country',\n    columns='Year',\n    values='cases').reset_index()\n\ndf_wide2.shape\n\ndf_wide2.iloc[0,0]\ndf_wide2.columns.name = None  # 불필요한 인덱스 이름제거\ndf_wide2\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>2024년</th>\n      <th>2025년</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>745</td>\n      <td>2666</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Brazil</td>\n      <td>37737</td>\n      <td>80488</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>China</td>\n      <td>212258</td>\n      <td>213766</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n깔끔한 데이터 조건  \n1. 각 칼럼이 하나의 변수를 의미한다.  \n2. 각 행이 하나의 관측치를 나타낸다.  \n3. 각 칸에 하나의 값이 들어있다. \n\n::: {#3a96cc6d .cell execution_count=44}\n``` {.python .cell-code}\ndf = pd.DataFrame({\n    'School' : ['A','A', 'B', 'B','C', 'C'],\n    'Gender' : [\"M\", 'F', \"M\", 'F', 'M', 'F'],\n    'City' : ['North', 'South', 'North', 'South', 'North', 'South'],\n    'Midterm' : [ 10, 20, 30, 40, 50, 60],\n    'Final' : [5, 15, 25, 35, 45, 55]\n})\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>School</th>\n      <th>Gender</th>\n      <th>City</th>\n      <th>Midterm</th>\n      <th>Final</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>M</td>\n      <td>North</td>\n      <td>10</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>F</td>\n      <td>South</td>\n      <td>20</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B</td>\n      <td>M</td>\n      <td>North</td>\n      <td>30</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B</td>\n      <td>F</td>\n      <td>South</td>\n      <td>40</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>C</td>\n      <td>M</td>\n      <td>North</td>\n      <td>50</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>C</td>\n      <td>F</td>\n      <td>South</td>\n      <td>60</td>\n      <td>55</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#15b019ce .cell execution_count=45}\n``` {.python .cell-code}\n# 학교별 중간고사 평균\ndf.pivot_table(\n    index='School',\n    values=['Midterm', 'Final'],\n    aggfunc = 'mean').reset_index()\n\n# 학교별 중간고사,기말고사 평균\ndf.pivot_table(\n    index='School',\n    columns='City',\n    values=['Midterm', 'Final'],\n    aggfunc = 'mean').reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>School</th>\n      <th colspan=\"2\" halign=\"left\">Final</th>\n      <th colspan=\"2\" halign=\"left\">Midterm</th>\n    </tr>\n    <tr>\n      <th>City</th>\n      <th></th>\n      <th>North</th>\n      <th>South</th>\n      <th>North</th>\n      <th>South</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>5.0</td>\n      <td>15.0</td>\n      <td>10.0</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>25.0</td>\n      <td>35.0</td>\n      <td>30.0</td>\n      <td>40.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C</td>\n      <td>45.0</td>\n      <td>55.0</td>\n      <td>50.0</td>\n      <td>60.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#484e14a6 .cell execution_count=46}\n``` {.python .cell-code}\n# column 옵션에 의미\ndf.pivot_table(\n    index='School',\n    columns='City',\n    values=['Midterm', 'Final'],\n    aggfunc = 'mean').reset_index()\n\n# 인덱스가 여러개\ndf.pivot_table(\n    index=['School', 'Gender'],\n    values='Midterm',\n    aggfunc = 'mean').reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>School</th>\n      <th>Gender</th>\n      <th>Midterm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>F</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>M</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B</td>\n      <td>F</td>\n      <td>40.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B</td>\n      <td>M</td>\n      <td>30.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>C</td>\n      <td>F</td>\n      <td>60.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>C</td>\n      <td>M</td>\n      <td>50.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#61b6c4cd .cell execution_count=47}\n``` {.python .cell-code}\n# aggfunc의 사용\n# 나만의 함수 \n# 벡터 원소들을 더 한 수의 제곱을 하는 함수 my_f\n\ndef my_f(input):\n    return sum(input)**2\n\ndf.pivot_table(\n    index='School',\n    values='Midterm',\n    aggfunc = my_f).reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>School</th>\n      <th>Midterm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>900</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>4900</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C</td>\n      <td>12100</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 실습 팔머펭귄 데이터 분석 - Pivot table\n\n::: {#01359c9e .cell execution_count=48}\n``` {.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\n```\n:::\n\n\n문제1. 펭귄 종별 평균 부리 길이 구하기\n\n::: {#bb9be622 .cell execution_count=49}\n``` {.python .cell-code}\npenguins.pivot_table(\n    index='species',\n    values= 'bill_length_mm',\n    aggfunc = 'mean').reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>bill_length_mm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>38.791391</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chinstrap</td>\n      <td>48.833824</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Gentoo</td>\n      <td>47.504878</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n문제2: 섬별 몸무게 중앙값 구하기\n\n::: {#e6f2e595 .cell execution_count=50}\n``` {.python .cell-code}\npenguins.pivot_table(\n    index='island',\n    values= 'body_mass_g',\n    aggfunc = 'median').reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>island</th>\n      <th>body_mass_g</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Biscoe</td>\n      <td>4775.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Dream</td>\n      <td>3687.5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Torgersen</td>\n      <td>3700.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n문제3: 성별에 따른 부리길이와 몸무게 평균 구하기\n\n::: {#17441ea2 .cell execution_count=51}\n``` {.python .cell-code}\npenguins.pivot_table(\n    index=['sex','species'],\n    values= ['bill_length_mm','body_mass_g'],\n    aggfunc = 'mean').reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>species</th>\n      <th>bill_length_mm</th>\n      <th>body_mass_g</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>female</td>\n      <td>Adelie</td>\n      <td>37.257534</td>\n      <td>3368.835616</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>Chinstrap</td>\n      <td>46.573529</td>\n      <td>3527.205882</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>female</td>\n      <td>Gentoo</td>\n      <td>45.563793</td>\n      <td>4679.741379</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>male</td>\n      <td>Adelie</td>\n      <td>40.390411</td>\n      <td>4043.493151</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>male</td>\n      <td>Chinstrap</td>\n      <td>51.094118</td>\n      <td>3938.970588</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>male</td>\n      <td>Gentoo</td>\n      <td>49.473770</td>\n      <td>5484.836066</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n문제4: 종과 섬에 따른 평균 지느러미 길이 구하기\n\n::: {#d8e7f89c .cell execution_count=52}\n``` {.python .cell-code}\npenguins.pivot_table(\n    index=['species','island'],\n    values= ['flipper_length_mm'],\n    aggfunc = 'mean').reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>flipper_length_mm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Biscoe</td>\n      <td>188.795455</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Dream</td>\n      <td>189.732143</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>191.196078</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>195.823529</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Gentoo</td>\n      <td>Biscoe</td>\n      <td>217.186992</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n문제 5: 종과 성별에 따른 부리 깊이 합계 구하기\n\n::: {#4fbc1a7b .cell execution_count=53}\n``` {.python .cell-code}\npenguins.pivot_table(\n    index=['species','sex'],\n    values= 'bill_depth_mm',\n    aggfunc = 'sum').reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>sex</th>\n      <th>bill_depth_mm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>female</td>\n      <td>1286.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>male</td>\n      <td>1392.3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chinstrap</td>\n      <td>female</td>\n      <td>598.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Chinstrap</td>\n      <td>male</td>\n      <td>654.6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Gentoo</td>\n      <td>female</td>\n      <td>825.8</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Gentoo</td>\n      <td>male</td>\n      <td>958.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n문제6: 종별 몸무게의 변동 범위 구하기\n\n::: {#7d9c3e98 .cell execution_count=54}\n``` {.python .cell-code}\ndef my_f(input):\n    return input.max() - input.min()\n\npenguins.pivot_table(\n    index='species',\n    values= 'body_mass_g',\n    aggfunc = my_f).reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>body_mass_g</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>1925.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chinstrap</td>\n      <td>2100.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Gentoo</td>\n      <td>2350.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 학생 성적 불러오기\n\n::: {#c2c7269f .cell execution_count=55}\n``` {.python .cell-code}\ndf = df = pd.read_csv('c:\\\\Users\\\\USER\\\\Documents\\\\lsbigdata-gen4\\\\data\\\\dat.csv')\n\ndf.head()\ndf.info()\n\nset(df[\"grade\"])\n\n# 여러 칼럼 선택\ndf.loc[:, ['school', 'sex', 'paid', 'goout']]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 366 entries, 0 to 365\nData columns (total 11 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   school    366 non-null    object \n 1   sex       366 non-null    object \n 2   paid      366 non-null    object \n 3   famrel    366 non-null    int64  \n 4   freetime  366 non-null    int64  \n 5   goout     356 non-null    float64\n 6   Dalc      366 non-null    int64  \n 7   Walc      366 non-null    int64  \n 8   health    366 non-null    int64  \n 9   absences  366 non-null    int64  \n 10  grade     366 non-null    int64  \ndtypes: float64(1), int64(7), object(3)\nmemory usage: 31.6+ KB\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>school</th>\n      <th>sex</th>\n      <th>paid</th>\n      <th>goout</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>no</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>no</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>MS</td>\n      <td>F</td>\n      <td>no</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>362</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>yes</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>364</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>365</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>366 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n### 칼럼 데이터 타입 변경\n최빈값으로 대체?\n기존 데이터 형태의 정수값으로 대체 가능(장점)\n전체 변수의 평균값이 변경 될 수 있음(단점)\n\n평균값으로 대체?\n전체 변수의 평균값이 그대로 유지(장점)\n데이터 극단값이 존재할 경우 영향을 받을 가능성(단점)\n평균값 소수점으로 나올 수 있음(단점)\n\n\n#### 여러 메서드\nrename() 메서드 \n특정 칼럼 이름 변경\n\n::: {#17cac4d5 .cell execution_count=56}\n``` {.python .cell-code}\ndf.rename(columns = {'Dalc' : 'dalc', 'Walc' : 'walc'})\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>school</th>\n      <th>sex</th>\n      <th>paid</th>\n      <th>famrel</th>\n      <th>freetime</th>\n      <th>goout</th>\n      <th>dalc</th>\n      <th>walc</th>\n      <th>health</th>\n      <th>absences</th>\n      <th>grade</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>no</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>no</td>\n      <td>5</td>\n      <td>3</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>5</td>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>MS</td>\n      <td>F</td>\n      <td>no</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>362</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>yes</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4.0</td>\n      <td>4</td>\n      <td>5</td>\n      <td>4</td>\n      <td>11</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>2</td>\n      <td>4</td>\n      <td>5.0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>2</td>\n      <td>3</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>364</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>4</td>\n      <td>4</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>365</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3.0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n<p>366 rows × 11 columns</p>\n</div>\n```\n:::\n:::\n\n\nastype() 메서드\n데이터 프레임 또는 시리즈의 데이터 타입을 변경하는데 사용\n\n::: {#d70883a4 .cell execution_count=57}\n``` {.python .cell-code}\n# 최빈값 대체코드\nmode_val = df.loc[:, ['goout']].mode()\ndf['goout'].isna()\n\ndf.loc[df['goout'].isna(), \"goout\"] = 3.0\ndf[\"goout\"] = df.loc[:, ['goout']].astype({'goout' : 'int64'})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>school</th>\n      <th>sex</th>\n      <th>paid</th>\n      <th>famrel</th>\n      <th>freetime</th>\n      <th>goout</th>\n      <th>Dalc</th>\n      <th>Walc</th>\n      <th>health</th>\n      <th>absences</th>\n      <th>grade</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>no</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>no</td>\n      <td>5</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>5</td>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>MS</td>\n      <td>F</td>\n      <td>no</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>362</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>yes</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n      <td>4</td>\n      <td>5</td>\n      <td>4</td>\n      <td>11</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>2</td>\n      <td>4</td>\n      <td>5</td>\n      <td>3</td>\n      <td>4</td>\n      <td>2</td>\n      <td>3</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>364</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>4</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>365</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n<p>366 rows × 11 columns</p>\n</div>\n```\n:::\n:::\n\n\nassign() 메서드\n새로운 칼럼을 생성하거나 특정 칼러 값을 변경 하는데 사용\n\n::: {#4655c5af .cell execution_count=58}\n``` {.python .cell-code}\ndef classify_famrel(famrel):\n     if famrel <= 2:\n        return 'Low'\n     elif famrel <= 4:\n         return 'Medium'\n     else:\n         return 'High'\n\n# famrel_quality 칼럼 생성       \ndf = df.assign(famrel_quality=df['famrel'].apply(classify_famrel))\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>school</th>\n      <th>sex</th>\n      <th>paid</th>\n      <th>famrel</th>\n      <th>freetime</th>\n      <th>goout</th>\n      <th>Dalc</th>\n      <th>Walc</th>\n      <th>health</th>\n      <th>absences</th>\n      <th>grade</th>\n      <th>famrel_quality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>no</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>6</td>\n      <td>1</td>\n      <td>Medium</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>no</td>\n      <td>5</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>High</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>10</td>\n      <td>4</td>\n      <td>Medium</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>3</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>9</td>\n      <td>Medium</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>GP</td>\n      <td>F</td>\n      <td>yes</td>\n      <td>4</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>5</td>\n      <td>4</td>\n      <td>4</td>\n      <td>Medium</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>MS</td>\n      <td>F</td>\n      <td>no</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Low</td>\n    </tr>\n    <tr>\n      <th>362</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>yes</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n      <td>4</td>\n      <td>5</td>\n      <td>4</td>\n      <td>11</td>\n      <td>3</td>\n      <td>High</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>2</td>\n      <td>4</td>\n      <td>5</td>\n      <td>3</td>\n      <td>4</td>\n      <td>2</td>\n      <td>3</td>\n      <td>10</td>\n      <td>Low</td>\n    </tr>\n    <tr>\n      <th>364</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>4</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n      <td>4</td>\n      <td>Medium</td>\n    </tr>\n    <tr>\n      <th>365</th>\n      <td>MS</td>\n      <td>M</td>\n      <td>no</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>5</td>\n      <td>5</td>\n      <td>3</td>\n      <td>Medium</td>\n    </tr>\n  </tbody>\n</table>\n<p>366 rows × 12 columns</p>\n</div>\n```\n:::\n:::\n\n\nselect_dtypes() 메서드\n데이터프레임에서 특정 데이터 타입을 가진 칼럼만 선택하는데 사용되는 메서드\n\n::: {#37900872 .cell execution_count=59}\n``` {.python .cell-code}\ndf.select_dtypes('number')\ndf.select_dtypes('object')\n\n\ndef standardize(x):\n     return (x - np.nanmean(x)/np.std(x))\n\ndf.select_dtypes('number').apply(standardize, axis = 0)\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>famrel</th>\n      <th>freetime</th>\n      <th>goout</th>\n      <th>Dalc</th>\n      <th>Walc</th>\n      <th>health</th>\n      <th>absences</th>\n      <th>grade</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.41557</td>\n      <td>-0.242302</td>\n      <td>1.156075</td>\n      <td>-0.677095</td>\n      <td>-0.789321</td>\n      <td>0.408977</td>\n      <td>5.310415</td>\n      <td>-0.639516</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.58443</td>\n      <td>-0.242302</td>\n      <td>0.156075</td>\n      <td>-0.677095</td>\n      <td>-0.789321</td>\n      <td>0.408977</td>\n      <td>3.310415</td>\n      <td>-0.639516</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.41557</td>\n      <td>-0.242302</td>\n      <td>-0.843925</td>\n      <td>0.322905</td>\n      <td>1.210679</td>\n      <td>0.408977</td>\n      <td>9.310415</td>\n      <td>2.360484</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.41557</td>\n      <td>-1.242302</td>\n      <td>-0.843925</td>\n      <td>-0.677095</td>\n      <td>-0.789321</td>\n      <td>2.408977</td>\n      <td>1.310415</td>\n      <td>7.360484</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.41557</td>\n      <td>-0.242302</td>\n      <td>-0.843925</td>\n      <td>-0.677095</td>\n      <td>0.210679</td>\n      <td>2.408977</td>\n      <td>3.310415</td>\n      <td>2.360484</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>-3.41557</td>\n      <td>-2.242302</td>\n      <td>-1.843925</td>\n      <td>-0.677095</td>\n      <td>-0.789321</td>\n      <td>2.408977</td>\n      <td>-0.689585</td>\n      <td>-1.639516</td>\n    </tr>\n    <tr>\n      <th>362</th>\n      <td>0.58443</td>\n      <td>1.757698</td>\n      <td>1.156075</td>\n      <td>2.322905</td>\n      <td>3.210679</td>\n      <td>1.408977</td>\n      <td>10.310415</td>\n      <td>1.360484</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>-2.41557</td>\n      <td>0.757698</td>\n      <td>2.156075</td>\n      <td>1.322905</td>\n      <td>2.210679</td>\n      <td>-0.591023</td>\n      <td>2.310415</td>\n      <td>8.360484</td>\n    </tr>\n    <tr>\n      <th>364</th>\n      <td>-0.41557</td>\n      <td>0.757698</td>\n      <td>-1.843925</td>\n      <td>1.322905</td>\n      <td>2.210679</td>\n      <td>2.408977</td>\n      <td>-0.689585</td>\n      <td>2.360484</td>\n    </tr>\n    <tr>\n      <th>365</th>\n      <td>-1.41557</td>\n      <td>-1.242302</td>\n      <td>0.156075</td>\n      <td>1.322905</td>\n      <td>1.210679</td>\n      <td>2.408977</td>\n      <td>4.310415</td>\n      <td>1.360484</td>\n    </tr>\n  </tbody>\n</table>\n<p>366 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}